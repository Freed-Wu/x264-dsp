;* ================================================================================================ *;
;*  pixel-a.sa: pixel metrics for TI C6000 DSP                                                      *;
;*                                                                                                  *;
;*  --------------------------------------------------------------------------------------------    *;
;*  | cpu cost table of pixel comparison on DM6467 simulator                                   |    *;
;*  |------------------------------------------------------------------------------------------|    *;
;*  | Function         | Optimized cost (cycles) | Pure C cost (cycles)    | Result            |    *;
;*  |                  |-------------------------|-------------------------|-------------------|    *;
;*  |                  | Debug      | Release    | Debug      | Release    | Debug   | Release |    *;
;*  |------------------|------------|------------|------------|------------|---------|---------|    *;
;*  | sad_16x16        | 817        | 79         | 4196       | 215        |  5.2    |  2.7 *  |    *;
;*  | sad_16x8         | 417        | 47         | 2108       | 118        |  5.1    |  2.5 *  |    *;
;*  | sad_8x16         | 418        | 47         | 2260       | 117        |  5.4    |  2.4 *  |    *;
;*  | sad_8x8          | 187        | 31         | 1148       | 68         |  6.1    |  2.1 *  |    *;
;*  |------------------|------------|------------|------------|------------|---------|---------|    *;
;*  | sad_x4_16x16     | 2472       | 196        | 16856      | 854        |  6.8    |  4.4 *  |    *;
;*  | sad_x4_16x8      | 1256       | 113        | 8504       | 469        |  6.8    |  4.2 *  |    *;
;*  | sad_x4_8x16      | 1256       | 115        | 9112       | 463        |  7.3    |  4.0 *  |    *;
;*  | sad_x4_8x8       | 648        | 71         | 4664       | 270        |  7.2    |  3.8 *  |    *;
;*  |------------------|------------|------------|------------|------------|---------|---------|    *;
;*  | sad_x3_16x16     | 1909       | 159        | 12645      | 640        |  6.6    |  4.0 *  |    *;
;*  | sad_x3_16x8      | 965        | 95         | 6381       | 352        |  6.6    |  3.7 *  |    *;
;*  | sad_x3_8x16      | 965        | 95         | 6837       | 348        |  7.1    |  3.7 *  |    *;
;*  | sad_x3_8x8       | 493        | 63         | 3501       | 203        |  7.1    |  3.2 *  |    *;
;*  |------------------|------------|------------|------------|------------|---------|---------|    *;
;*  | satd_16x16       | 2153       | 548        | 10421      | 964        |  4.8    |  1.8 *  |    *;
;*  | satd_16x8        | 1076       | 278        | 5212       | 481        |  4.8    |  1.7 *  |    *;
;*  | satd_8x16        | 1083       | 279        | 5214       | 486        |  4.8    |  1.7 *  |    *;
;*  | satd_8x8         | 519        | 127        | 2610       | 245        |  5.0    |  1.8 *  |    *;
;*  | satd_4x4         | 163        | 48         | 831        | 72         |  5.1    |  1.5 *  |    *;
;*  |-------------------------------|------------|------------|------------|---------|---------|    *;
;*  | intra_satd_x3_16x16 | 7032    | 1816       | 34533      | 3250       |  4.9    |  1.8    |    *;
;*  | intra_satd_x3_8x8c  | 1387    | 348        | 9270       | 940        |  6.7    |  2.7 *  |    *;
;*  | intra_satd_x3_4x4   | 368     | 84         | 2722       | 318        |  7.4    |  3.8 *  |    *;
;*  | intra_satd_x4_4x4_h | 601     | 130        | 4193       | 465        |  7.0    |  3.6 *  |    *;
;*  | intra_satd_x4_4x4_v | 592     | 128        | 4244       | 476        |  7.2    |  3.7 *  |    *;
;*  |-------------------------------|------------|------------|------------|---------|---------|    *;
;*  | ssd_8x8          | 350        | 41         | 2236       | 80         |  6.4    |  1.9    |    *;
;*  | var2_8x8         | 520        | 49         | 2374       | 94         |  4.6    |  2.0    |    *;
;*  --------------------------------------------------------------------------------------------    *;
;*                                                                                                  *;
;* ================================================================================================ *;

;* ======================================================================== *;
;* x264_pixel_sad_16x16_ti -- sad on 16x16 block (memory unaligned)         *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_16x16_ti"
		.global _x264_pixel_sad_16x16_ti
_x264_pixel_sad_16x16_ti .cproc A_srcImg, A_srcPitch, B_refImg, B_refPitch
			.no_mdep

			.reg            B_srcImg, A_refImg                 ; A/B indicates using Data Path A/B
            .reg            B_sFEDC:B_sBA98, A_s7654:A_s3210   ; src  [0 - 15]
            .reg            B_rFEDC:B_rBA98, A_r7654:A_r3210   ; ref  [0 - 15]
            .reg            B_dFEDC, B_dBA98, A_d7654, A_d3210 ; diff [0 - 15]
            .reg            B_s3, B_s2, A_s1, A_s0             ; sad part
            .reg            A_retval, A_sad, B_sad, A_k1, i
            .reg			A_srcPitch_8x, B_refPitch_8x

            MVKL            0x01010101, A_k1
            MVKH            0x01010101, A_k1                 ; A_k1 = 0x01010101
            SHR             A_srcPitch, 3,          A_srcPitch_8x  ; A_srcPitch_8x = A_srcPitch >> 3
            SHR				B_refPitch, 3,          B_refPitch_8x  ; B_refPitch_8x = B_refPitch >> 3
            ADD             A_srcImg,   8,          B_srcImg ; B_srcImg = A_srcImg + 8
            ADD             B_refImg,   8,          A_refImg ; A_refImg = B_refImg + 8
            MVK             15,         i                    ; i = 15
            ZERO            A_sad                            ; A_sad = 0
            ZERO            B_sad                            ; B_sad = 0

loop_sad_16x16: .trip       16,         16,         16       ; loop count

            ; Load Nonaligned Double-Word From Memory
            LDNDW           *B_srcImg++[A_srcPitch_8x], B_sFEDC:B_sBA98 ; high 8 bytes of src to B registers .D2T2
            LDNDW           *A_srcImg++[A_srcPitch_8x], A_s7654:A_s3210 ; low  8 bytes of src to A registers .D1T1
            LDNDW           *A_refImg++[B_refPitch_8x], B_rFEDC:B_rBA98 ; high 8 bytes of ref to B registers .D1T2
            LDNDW           *B_refImg++[B_refPitch_8x], A_r7654:A_r3210 ; low  8 bytes of ref to A registers .D2T1

            SUBABS4         B_sFEDC,    B_rFEDC,    B_dFEDC ; diff [12 - 15]
            SUBABS4         B_sBA98,    B_rBA98,    B_dBA98 ; diff [8  - 11]
            SUBABS4         A_s7654,    A_r7654,    A_d7654 ; diff [4  - 7 ]
            SUBABS4         A_s3210,    A_r3210,    A_d3210 ; diff [0  - 3 ]

            DOTPU4          B_dFEDC,    A_k1,       B_s3    ; diff [C + D + E + F]
            DOTPU4          B_dBA98,    A_k1,       B_s2    ; diff [8 + 9 + A + B]
            DOTPU4          A_d7654,    A_k1,       A_s1    ; diff [4 + 5 + 6 + 7]
            DOTPU4          A_d3210,    A_k1,       A_s0    ; diff [0 + 1 + 2 + 3]

            ADD             B_sad,      B_s3,       B_sad   ; sad accumulation of Data Path B
            ADD             A_sad,      A_s1,       A_sad   ; sad accumulation of Data Path A
            ADD             B_sad,      B_s2,       B_sad   ; sad accumulation of Data Path B
            ADD             A_sad,      A_s0,       A_sad   ; sad accumulation of Data Path A

   [i]      BDEC            loop_sad_16x16,  i

            ADD             A_sad,      B_sad,      A_retval

            .return         A_retval
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_16x8_ti -- sad on 16x8 block (memory unaligned)           *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_16x8_ti"
		.global _x264_pixel_sad_16x8_ti
_x264_pixel_sad_16x8_ti .cproc A_srcImg, A_srcPitch, B_refImg, B_refPitch
			.no_mdep

			.reg            B_srcImg, A_refImg                 ; A/B indicates using Data Path A/B
            .reg            B_sFEDC:B_sBA98, A_s7654:A_s3210   ; src  [0 - 15]
            .reg            B_rFEDC:B_rBA98, A_r7654:A_r3210   ; ref  [0 - 15]
            .reg            B_dFEDC, B_dBA98, A_d7654, A_d3210 ; diff [0 - 15]
            .reg            B_s3, B_s2, A_s1, A_s0             ; sad part
            .reg            A_retval, A_sad, B_sad, A_k1, i
            .reg			A_srcPitch_8x, B_refPitch_8x

            MVKL            0x01010101, A_k1
            MVKH            0x01010101, A_k1                 ; A_k1 = 0x01010101
            SHR             A_srcPitch, 3,          A_srcPitch_8x  ; A_srcPitch_8x = A_srcPitch >> 3
            SHR				B_refPitch, 3,          B_refPitch_8x  ; B_refPitch_8x = B_refPitch >> 3
            ADD             A_srcImg,   8,          B_srcImg ; B_srcImg = A_srcImg + 8
            ADD             B_refImg,   8,          A_refImg ; A_refImg = B_refImg + 8
            MVK             7,          i                    ; i = 7
            ZERO            A_sad                            ; A_sad = 0
            ZERO            B_sad                            ; B_sad = 0

loop_sad_16x8: .trip        8,          8,          8        ; loop count

            ; Load Nonaligned Double-Word From Memory
            LDNDW           *B_srcImg++[A_srcPitch_8x], B_sFEDC:B_sBA98 ; high 8 bytes of src to B registers
            LDNDW           *A_srcImg++[A_srcPitch_8x], A_s7654:A_s3210 ; low  8 bytes of src to A registers
            LDNDW           *A_refImg++[B_refPitch_8x], B_rFEDC:B_rBA98 ; high 8 bytes of ref to B registers
            LDNDW           *B_refImg++[B_refPitch_8x], A_r7654:A_r3210 ; low  8 bytes of ref to A registers

            SUBABS4         B_sFEDC,    B_rFEDC,    B_dFEDC ; diff [12 - 15]
            SUBABS4         B_sBA98,    B_rBA98,    B_dBA98 ; diff [8  - 11]
            SUBABS4         A_s7654,    A_r7654,    A_d7654 ; diff [4  - 7 ]
            SUBABS4         A_s3210,    A_r3210,    A_d3210 ; diff [0  - 3 ]

            DOTPU4          B_dFEDC,    A_k1,       B_s3    ; diff [C + D + E + F]
            DOTPU4          B_dBA98,    A_k1,       B_s2    ; diff [8 + 9 + A + B]
            DOTPU4          A_d7654,    A_k1,       A_s1    ; diff [4 + 5 + 6 + 7]
            DOTPU4          A_d3210,    A_k1,       A_s0    ; diff [0 + 1 + 2 + 3]

            ADD             B_sad,      B_s3,       B_sad   ; sad accumulation of Data Path B
            ADD             A_sad,      A_s1,       A_sad   ; sad accumulation of Data Path A
            ADD             B_sad,      B_s2,       B_sad   ; sad accumulation of Data Path B
            ADD             A_sad,      A_s0,       A_sad   ; sad accumulation of Data Path A

   [i]      BDEC            loop_sad_16x8,  i

            ADD             A_sad,      B_sad,      A_retval

            .return         A_retval
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_8x16_ti -- sad on 8x16 block (memory unaligned)           *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_8x16_ti"
        .global _x264_pixel_sad_8x16_ti
_x264_pixel_sad_8x16_ti .cproc A_srcImg, A_srcPitch, B_refImg, B_refPitch
            .no_mdep

			.reg            B_srcImg, A_refImg
            .reg            B_sFEDC:B_sBA98, A_s7654:A_s3210   ; src  [0 - 15]
            .reg            B_rFEDC:B_rBA98, A_r7654:A_r3210   ; ref  [0 - 15]
            .reg            B_dFEDC, B_dBA98, A_d7654, A_d3210 ; diff [0 - 15]
            .reg            B_s3, B_s2, A_s1, A_s0             ; sad part
            .reg            A_retval, A_sad, B_sad, A_k1, i
            .reg			A_srcPitch_4x, B_refPitch_4x

            MVKL            0x01010101, A_k1
            MVKH            0x01010101, A_k1                 ; A_k1 = 0x01010101
            SHR             A_srcPitch, 2,          A_srcPitch_4x  ; A_srcPitch_4x = A_srcPitch >> 2
            SHR				B_refPitch, 2,          B_refPitch_4x  ; B_refPitch_4x = B_refPitch >> 2
            ADD             A_srcImg,   A_srcPitch, B_srcImg   ; B_srcImg = A_srcImg + A_srcPitch
            ADD             B_refImg,   B_refPitch, A_refImg   ; A_refImg = B_refImg + B_refPitch
            MVK             7,          i                      ; i = 7
            ZERO            A_sad                              ; A_sad = 0
            ZERO            B_sad                              ; B_sad = 0

loop_sad_8x16: .trip        8,          8,          8          ; loop count

            ; Load Nonaligned Double-Word From Memory
            LDNDW           *B_srcImg++[A_srcPitch_4x], B_sFEDC:B_sBA98 ; 8 bytes of src line 2 to B registers
            LDNDW           *A_srcImg++[A_srcPitch_4x], A_s7654:A_s3210 ; 8 bytes of src line 1 to A registers
            LDNDW           *A_refImg++[B_refPitch_4x], B_rFEDC:B_rBA98 ; 8 bytes of ref line 2 to B registers
            LDNDW           *B_refImg++[B_refPitch_4x], A_r7654:A_r3210 ; 8 bytes of ref line 1 to A registers

            SUBABS4         B_sFEDC,    B_rFEDC,    B_dFEDC ; diff [12 - 15]
            SUBABS4         B_sBA98,    B_rBA98,    B_dBA98 ; diff [8  - 11]
            SUBABS4         A_s7654,    A_r7654,    A_d7654 ; diff [4  - 7 ]
            SUBABS4         A_s3210,    A_r3210,    A_d3210 ; diff [0  - 3 ]

            DOTPU4          B_dFEDC,    A_k1,       B_s3    ; diff [C + D + E + F]
            DOTPU4          B_dBA98,    A_k1,       B_s2    ; diff [8 + 9 + A + B]
            DOTPU4          A_d7654,    A_k1,       A_s1    ; diff [4 + 5 + 6 + 7]
            DOTPU4          A_d3210,    A_k1,       A_s0    ; diff [0 + 1 + 2 + 3]

            ADD             B_sad,      B_s3,       B_sad   ; sad accumulation of Data Path B
            ADD             A_sad,      A_s1,       A_sad   ; sad accumulation of Data Path A
            ADD             B_sad,      B_s2,       B_sad   ; sad accumulation of Data Path B
            ADD             A_sad,      A_s0,       A_sad   ; sad accumulation of Data Path A

   [i]      BDEC            loop_sad_8x16,  i

            ADD             A_sad,      B_sad,      A_retval

            .return         A_retval
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_8x8_ti -- sad on 8x8 block (memory unaligned)             *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_8x8_ti"
        .global _x264_pixel_sad_8x8_ti
_x264_pixel_sad_8x8_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg            pix1_FEDC:pix1_BA98, pix1_7654:pix1_3210
            .reg            pix2_FEDC:pix2_BA98, pix2_7654:pix2_3210
            .reg            diff_FEDC, diff_BA98, diff_7654, diff_3210
            .reg            dotp_0, dotp_1, dotp_2, dotp_3
            .reg			i_pix1_8x, i_pix2_8x
            .reg            sad, sad_0, sad_1, k_1

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                    ; k_1 = 0x01010101
            SHR             i_pix1,     3,          i_pix1_8x  ; i_pix1_8x = i_pix1 >> 3
            SHR				i_pix2,     3,          i_pix2_8x  ; i_pix2_8x = i_pix2 >> 3

            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 1
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 1
            LDNDW           *pix1++[i_pix1_8x], pix1_FEDC:pix1_BA98 ; 8 bytes of pix1 line 2
            LDNDW           *pix2++[i_pix2_8x], pix2_FEDC:pix2_BA98 ; 8 bytes of pix2 line 2
            SUBABS4         pix1_3210,  pix2_3210,  diff_3210 ; diff[0-3]
            SUBABS4         pix1_7654,  pix2_7654,  diff_7654 ; diff[4-7]
            SUBABS4         pix1_BA98,  pix2_BA98,  diff_BA98 ; diff[8-B]
            SUBABS4         pix1_FEDC,  pix2_FEDC,  diff_FEDC ; diff[C-F]
            DOTPU4          diff_3210,  k_1,        dotp_0    ; diff[0+1+2+3]
            DOTPU4          diff_7654,  k_1,        dotp_1    ; diff[4+5+6+7]
            DOTPU4          diff_BA98,  k_1,        dotp_2    ; diff[8+9+A+B]
            DOTPU4          diff_FEDC,  k_1,        dotp_3    ; diff[C+D+E+F]
            ADD             dotp_2,     dotp_0,     sad_0
            ADD             dotp_3,     dotp_1,     sad_1

            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 3
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 3
            LDNDW           *pix1++[i_pix1_8x], pix1_FEDC:pix1_BA98 ; 8 bytes of pix1 line 4
            LDNDW           *pix2++[i_pix2_8x], pix2_FEDC:pix2_BA98 ; 8 bytes of pix2 line 4
            SUBABS4         pix1_3210,  pix2_3210,  diff_3210 ; diff[0-3]
            SUBABS4         pix1_7654,  pix2_7654,  diff_7654 ; diff[4-7]
            SUBABS4         pix1_BA98,  pix2_BA98,  diff_BA98 ; diff[8-B]
            SUBABS4         pix1_FEDC,  pix2_FEDC,  diff_FEDC ; diff[C-F]
            DOTPU4          diff_3210,  k_1,        dotp_0    ; diff[0+1+2+3]
            DOTPU4          diff_7654,  k_1,        dotp_1    ; diff[4+5+6+7]
            DOTPU4          diff_BA98,  k_1,        dotp_2    ; diff[8+9+A+B]
            DOTPU4          diff_FEDC,  k_1,        dotp_3    ; diff[C+D+E+F]
            ADD             sad_0,      dotp_0,     sad_0
            ADD             sad_1,      dotp_1,     sad_1
            ADD             sad_0,      dotp_2,     sad_0
            ADD             sad_1,      dotp_3,     sad_1

            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 5
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 5
            LDNDW           *pix1++[i_pix1_8x], pix1_FEDC:pix1_BA98 ; 8 bytes of pix1 line 6
            LDNDW           *pix2++[i_pix2_8x], pix2_FEDC:pix2_BA98 ; 8 bytes of pix2 line 6
            SUBABS4         pix1_3210,  pix2_3210,  diff_3210 ; diff[0-3]
            SUBABS4         pix1_7654,  pix2_7654,  diff_7654 ; diff[4-7]
            SUBABS4         pix1_BA98,  pix2_BA98,  diff_BA98 ; diff[8-B]
            SUBABS4         pix1_FEDC,  pix2_FEDC,  diff_FEDC ; diff[C-F]
            DOTPU4          diff_3210,  k_1,        dotp_0    ; diff[0+1+2+3]
            DOTPU4          diff_7654,  k_1,        dotp_1    ; diff[4+5+6+7]
            DOTPU4          diff_BA98,  k_1,        dotp_2    ; diff[8+9+A+B]
            DOTPU4          diff_FEDC,  k_1,        dotp_3    ; diff[C+D+E+F]
            ADD             sad_0,      dotp_0,     sad_0
            ADD             sad_1,      dotp_1,     sad_1
            ADD             sad_0,      dotp_2,     sad_0
            ADD             sad_1,      dotp_3,     sad_1

            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 7
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 7
            LDNDW           *pix1++[i_pix1_8x], pix1_FEDC:pix1_BA98 ; 8 bytes of pix1 line 8
            LDNDW           *pix2++[i_pix2_8x], pix2_FEDC:pix2_BA98 ; 8 bytes of pix2 line 8
            SUBABS4         pix1_3210,  pix2_3210,  diff_3210 ; diff[0-3]
            SUBABS4         pix1_7654,  pix2_7654,  diff_7654 ; diff[4-7]
            SUBABS4         pix1_BA98,  pix2_BA98,  diff_BA98 ; diff[8-B]
            SUBABS4         pix1_FEDC,  pix2_FEDC,  diff_FEDC ; diff[C-F]
            DOTPU4          diff_3210,  k_1,        dotp_0    ; diff[0+1+2+3]
            DOTPU4          diff_7654,  k_1,        dotp_1    ; diff[4+5+6+7]
            DOTPU4          diff_BA98,  k_1,        dotp_2    ; diff[8+9+A+B]
            DOTPU4          diff_FEDC,  k_1,        dotp_3    ; diff[C+D+E+F]
            ADD             sad_0,      dotp_0,     sad_0
            ADD             sad_1,      dotp_1,     sad_1
            ADD             sad_0,      dotp_2,     sad_0
            ADD             sad_1,      dotp_3,     sad_1

            ADD             sad_0,      sad_1,      sad
            .return         sad
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_8x4_ti -- sad on 8x4 block (memory unaligned)             *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_8x4_ti"
        .global _x264_pixel_sad_8x4_ti
_x264_pixel_sad_8x4_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg            pix1_FEDC:pix1_BA98, pix1_7654:pix1_3210
            .reg            pix2_FEDC:pix2_BA98, pix2_7654:pix2_3210
            .reg            diff_FEDC, diff_BA98, diff_7654, diff_3210
            .reg            dotp_0, dotp_1, dotp_2, dotp_3
            .reg			i_pix1_8x, i_pix2_8x
            .reg            sad, sad_0, sad_1, k_1

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                    ; k_1 = 0x01010101
            SHR             i_pix1,     3,          i_pix1_8x  ; i_pix1_8x = i_pix1 >> 3
            SHR				i_pix2,     3,          i_pix2_8x  ; i_pix2_8x = i_pix2 >> 3

            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 1
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 1
            LDNDW           *pix1++[i_pix1_8x], pix1_FEDC:pix1_BA98 ; 8 bytes of pix1 line 2
            LDNDW           *pix2++[i_pix2_8x], pix2_FEDC:pix2_BA98 ; 8 bytes of pix2 line 2
            SUBABS4         pix1_3210,  pix2_3210,  diff_3210 ; diff[0-3]
            SUBABS4         pix1_7654,  pix2_7654,  diff_7654 ; diff[4-7]
            SUBABS4         pix1_BA98,  pix2_BA98,  diff_BA98 ; diff[8-B]
            SUBABS4         pix1_FEDC,  pix2_FEDC,  diff_FEDC ; diff[C-F]
            DOTPU4          diff_3210,  k_1,        dotp_0    ; diff[0+1+2+3]
            DOTPU4          diff_7654,  k_1,        dotp_1    ; diff[4+5+6+7]
            DOTPU4          diff_BA98,  k_1,        dotp_2    ; diff[8+9+A+B]
            DOTPU4          diff_FEDC,  k_1,        dotp_3    ; diff[C+D+E+F]
            ADD             dotp_2,     dotp_0,     sad_0
            ADD             dotp_3,     dotp_1,     sad_1

            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 3
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 3
            LDNDW           *pix1++[i_pix1_8x], pix1_FEDC:pix1_BA98 ; 8 bytes of pix1 line 4
            LDNDW           *pix2++[i_pix2_8x], pix2_FEDC:pix2_BA98 ; 8 bytes of pix2 line 4
            SUBABS4         pix1_3210,  pix2_3210,  diff_3210 ; diff[0-3]
            SUBABS4         pix1_7654,  pix2_7654,  diff_7654 ; diff[4-7]
            SUBABS4         pix1_BA98,  pix2_BA98,  diff_BA98 ; diff[8-B]
            SUBABS4         pix1_FEDC,  pix2_FEDC,  diff_FEDC ; diff[C-F]
            DOTPU4          diff_3210,  k_1,        dotp_0   ; diff[0+1+2+3]
            DOTPU4          diff_7654,  k_1,        dotp_1   ; diff[4+5+6+7]
            DOTPU4          diff_BA98,  k_1,        dotp_2   ; diff[8+9+A+B]
            DOTPU4          diff_FEDC,  k_1,        dotp_3   ; diff[C+D+E+F]
            ADD             sad_0,      dotp_0,     sad_0
            ADD             sad_1,      dotp_1,     sad_1
            ADD             sad_0,      dotp_2,     sad_0
            ADD             sad_1,      dotp_3,     sad_1

            ADD             sad_0,      sad_1,      sad
            .return         sad
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_4x8_ti -- sad on 4x8 block (memory unaligned)             *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_4x8_ti"
        .global _x264_pixel_sad_4x8_ti
_x264_pixel_sad_4x8_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg            pix1_7654, pix1_3210
            .reg            pix2_7654, pix2_3210
            .reg            diff_7654, diff_3210
            .reg			i_pix1_4x, i_pix2_4x
            .reg            sad, sad_0, sad_1, dotp_0, dotp_1, k_1

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                ; k_1 = 0x01010101
            SHR             i_pix1,     2,      i_pix1_4x  ; i_pix1_4x = i_pix1 >> 2
            SHR				i_pix2,     2,      i_pix2_4x  ; i_pix2_4x = i_pix2 >> 2
            ZERO            sad_0                          ; sad_0 = 0
            ZERO            sad_1                          ; sad_1 = 0

            LDNW            *pix1++[i_pix1_4x], pix1_3210 ; 4 bytes of pix1 line 1
            LDNW            *pix2++[i_pix2_4x], pix2_3210 ; 4 bytes of pix2 line 1
            LDNW            *pix1++[i_pix1_4x], pix1_7654 ; 4 bytes of pix1 line 2
            LDNW            *pix2++[i_pix2_4x], pix2_7654 ; 4 bytes of pix2 line 2

            SUBABS4         pix1_3210,    pix2_3210, diff_3210
            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            DOTPU4          diff_3210,    k_1,       dotp_0
            DOTPU4          diff_7654,    k_1,       dotp_1
            ADD             sad_0,        dotp_0,    sad_0
            ADD             sad_1,        dotp_1,    sad_1

            LDNW            *pix1++[i_pix1_4x], pix1_3210 ; 4 bytes of pix1 line 3
            LDNW            *pix2++[i_pix2_4x], pix2_3210 ; 4 bytes of pix2 line 3
            LDNW            *pix1++[i_pix1_4x], pix1_7654 ; 4 bytes of pix1 line 4
            LDNW            *pix2++[i_pix2_4x], pix2_7654 ; 4 bytes of pix2 line 4

            SUBABS4         pix1_3210,    pix2_3210, diff_3210
            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            DOTPU4          diff_3210,    k_1,       dotp_0
            DOTPU4          diff_7654,    k_1,       dotp_1
            ADD             sad_0,        dotp_0,    sad_0
            ADD             sad_1,        dotp_1,    sad_1

            LDNW            *pix1++[i_pix1_4x], pix1_3210 ; 4 bytes of pix1 line 5
            LDNW            *pix2++[i_pix2_4x], pix2_3210 ; 4 bytes of pix2 line 5
            LDNW            *pix1++[i_pix1_4x], pix1_7654 ; 4 bytes of pix1 line 6
            LDNW            *pix2++[i_pix2_4x], pix2_7654 ; 4 bytes of pix2 line 6

            SUBABS4         pix1_3210,    pix2_3210, diff_3210
            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            DOTPU4          diff_3210,    k_1,       dotp_0
            DOTPU4          diff_7654,    k_1,       dotp_1
            ADD             sad_0,        dotp_0,    sad_0
            ADD             sad_1,        dotp_1,    sad_1

            LDNW            *pix1++[i_pix1_4x], pix1_3210 ; 4 bytes of pix1 line 7
            LDNW            *pix2++[i_pix2_4x], pix2_3210 ; 4 bytes of pix2 line 7
            LDNW            *pix1++[i_pix1_4x], pix1_7654 ; 4 bytes of pix1 line 8
            LDNW            *pix2++[i_pix2_4x], pix2_7654 ; 4 bytes of pix2 line 8

            SUBABS4         pix1_3210,    pix2_3210, diff_3210
            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            DOTPU4          diff_3210,    k_1,       dotp_0
            DOTPU4          diff_7654,    k_1,       dotp_1
            ADD             sad_0,        dotp_0,    sad_0
            ADD             sad_1,        dotp_1,    sad_1

            ADD             sad_0,        sad_1,     sad
            .return         sad
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_4x4_ti -- sad on 4x4 block (memory unaligned)             *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_4x4_ti"
        .global _x264_pixel_sad_4x4_ti
_x264_pixel_sad_4x4_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg            pix1_7654, pix1_3210
            .reg            pix2_7654, pix2_3210
            .reg            diff_7654, diff_3210
            .reg			i_pix1_4x, i_pix2_4x
            .reg            sad, sad_0, sad_1, dotp_0, dotp_1, k_1

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                ; k_1 = 0x01010101
            SHR             i_pix1,     2,      i_pix1_4x  ; i_pix1_4x = i_pix1 >> 2
            SHR				i_pix2,     2,      i_pix2_4x  ; i_pix2_4x = i_pix2 >> 2
            ZERO            sad_0                          ; sad_0 = 0
            ZERO            sad_1                          ; sad_1 = 0

            LDNW            *pix1++[i_pix1_4x], pix1_3210 ; 4 bytes of pix1 line 1
            LDNW            *pix2++[i_pix2_4x], pix2_3210 ; 4 bytes of pix2 line 1
            LDNW            *pix1++[i_pix1_4x], pix1_7654 ; 4 bytes of pix1 line 2
            LDNW            *pix2++[i_pix2_4x], pix2_7654 ; 4 bytes of pix2 line 2

            SUBABS4         pix1_3210,    pix2_3210, diff_3210
            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            DOTPU4          diff_3210,    k_1,       dotp_0
            DOTPU4          diff_7654,    k_1,       dotp_1
            ADD             sad_0,        dotp_0,    sad_0
            ADD             sad_1,        dotp_1,    sad_1

            LDNW            *pix1++[i_pix1_4x], pix1_3210 ; 4 bytes of pix1 line 3
            LDNW            *pix2++[i_pix2_4x], pix2_3210 ; 4 bytes of pix2 line 3
            LDNW            *pix1++[i_pix1_4x], pix1_7654 ; 4 bytes of pix1 line 4
            LDNW            *pix2++[i_pix2_4x], pix2_7654 ; 4 bytes of pix2 line 4

            SUBABS4         pix1_3210,    pix2_3210, diff_3210
            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            DOTPU4          diff_3210,    k_1,       dotp_0
            DOTPU4          diff_7654,    k_1,       dotp_1
            ADD             sad_0,        dotp_0,    sad_0
            ADD             sad_1,        dotp_1,    sad_1

            ADD             sad_0,        sad_1,     sad
            .return         sad
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x4_16x16_ti -- sad_x4 on 16x16 block                      *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x4_16x16_ti"
		.global _x264_pixel_sad_x4_16x16_ti
_x264_pixel_sad_x4_16x16_ti .cproc fenc, pix0, pix1, pix2, pix3, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad3_0, sad3_1, sad3_2, sad3_3
            .reg            sad_3:sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2, pup3
            .reg            pix_8x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ZERO            sad_3                            ; sad_3 = 0
            ADD             pix0,       8,          pup0     ; pup0 = pix0 + 8
            ADD             pix1,       8,          pup1     ; pup1 = pix1 + 8
            ADD             pix2,       8,          pup2     ; pup2 = pix2 + 8
            ADD             pix3,       8,          pup3     ; pup3 = pix3 + 8
            SHR				i_stride,   3,          pix_8x   ; pix_8x = i_stride >> 3
            MVK             15,         i                    ; i = 15

loop_sad_x4_16x16: .trip    16,         16,         16       ; loop count
            LDNDW           *fenc++,    src_7654:src_3210
            LDNDW           *fenc++,    src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; load pix3 and calculate sad
            LDNDW           *pix3++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup3++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad3_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad3_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad3_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad3_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2, sad_3
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_3,      sad3_0,     sad_3
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_3,      sad3_1,     sad_3
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_3,      sad3_2,     sad_3
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
            ADD             sad_3,      sad3_3,     sad_3
   [i]      BDEC            loop_sad_x4_16x16,  i

            ; store sad_0, sad_1, sad_2, sad_3
            STNDW           sad_1:sad_0, *scores++
            STNDW           sad_3:sad_2, *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x4_16x8_ti -- sad_x4 on 16x8 block                        *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x4_16x8_ti"
		.global _x264_pixel_sad_x4_16x8_ti
_x264_pixel_sad_x4_16x8_ti .cproc fenc, pix0, pix1, pix2, pix3, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad3_0, sad3_1, sad3_2, sad3_3
            .reg            sad_3:sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2, pup3
            .reg            pix_8x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ZERO            sad_3                            ; sad_3 = 0
            ADD             pix0,       8,          pup0     ; pup0 = pix0 + 8
            ADD             pix1,       8,          pup1     ; pup1 = pix1 + 8
            ADD             pix2,       8,          pup2     ; pup2 = pix2 + 8
            ADD             pix3,       8,          pup3     ; pup3 = pix3 + 8
            SHR				i_stride,   3,          pix_8x   ; pix_8x = i_stride >> 3
            MVK             7,          i                    ; i = 7

loop_sad_x4_16x8: .trip     8,          8,          8        ; loop count
            LDNDW           *fenc++,    src_7654:src_3210
            LDNDW           *fenc++,    src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; load pix3 and calculate sad
            LDNDW           *pix3++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup3++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad3_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad3_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad3_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad3_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2, sad_3
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_3,      sad3_0,     sad_3
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_3,      sad3_1,     sad_3
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_3,      sad3_2,     sad_3
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
            ADD             sad_3,      sad3_3,     sad_3
   [i]      BDEC            loop_sad_x4_16x8,  i

            ; store sad_0, sad_1, sad_2, sad_3
            STNDW           sad_1:sad_0, *scores++
            STNDW           sad_3:sad_2, *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x4_8x16_ti -- sad_x4 on 8x16 block                        *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x4_8x16_ti"
		.global _x264_pixel_sad_x4_8x16_ti
_x264_pixel_sad_x4_8x16_ti .cproc fenc, pix0, pix1, pix2, pix3, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad3_0, sad3_1, sad3_2, sad3_3
            .reg            sad_3:sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2, pup3
            .reg            pix_4x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ZERO            sad_3                            ; sad_3 = 0
            ADD             pix0,       i_stride,   pup0     ; pup0 = pix0 + i_stride
            ADD             pix1,       i_stride,   pup1     ; pup1 = pix1 + i_stride
            ADD             pix2,       i_stride,   pup2     ; pup2 = pix2 + i_stride
            ADD             pix3,       i_stride,   pup3     ; pup3 = pix3 + i_stride
            SHR				i_stride,   2,          pix_4x   ; pix_4x = i_stride >> 2
            MVK             7,          i                    ; i = 7

loop_sad_x4_8x16: .trip     8,          8,          8        ; loop count
            LDNDW           *fenc++[2], src_7654:src_3210
            LDNDW           *fenc++[2], src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; load pix3 and calculate sad
            LDNDW           *pix3++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup3++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad3_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad3_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad3_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad3_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2, sad_3
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_3,      sad3_0,     sad_3
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_3,      sad3_1,     sad_3
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_3,      sad3_2,     sad_3
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
            ADD             sad_3,      sad3_3,     sad_3
   [i]      BDEC            loop_sad_x4_8x16,  i

            ; store sad_0, sad_1, sad_2, sad_3
            STNDW           sad_1:sad_0, *scores++
            STNDW           sad_3:sad_2, *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x4_8x8_ti -- sad_x4 on 8x8 block                          *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x4_8x8_ti"
		.global _x264_pixel_sad_x4_8x8_ti
_x264_pixel_sad_x4_8x8_ti .cproc fenc, pix0, pix1, pix2, pix3, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad3_0, sad3_1, sad3_2, sad3_3
            .reg            sad_3:sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2, pup3
            .reg            pix_4x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ZERO            sad_3                            ; sad_3 = 0
            ADD             pix0,       i_stride,   pup0     ; pup0 = pix0 + i_stride
            ADD             pix1,       i_stride,   pup1     ; pup1 = pix1 + i_stride
            ADD             pix2,       i_stride,   pup2     ; pup2 = pix2 + i_stride
            ADD             pix3,       i_stride,   pup3     ; pup3 = pix3 + i_stride
            SHR				i_stride,   2,          pix_4x   ; pix_4x = i_stride >> 2
            MVK             3,          i                    ; i = 3

loop_sad_x4_8x8: .trip      4,          4,          4        ; loop count
            LDNDW           *fenc++[2], src_7654:src_3210
            LDNDW           *fenc++[2], src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; load pix3 and calculate sad
            LDNDW           *pix3++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup3++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad3_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad3_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad3_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad3_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2, sad_3
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_3,      sad3_0,     sad_3
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_3,      sad3_1,     sad_3
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_3,      sad3_2,     sad_3
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
            ADD             sad_3,      sad3_3,     sad_3
   [i]      BDEC            loop_sad_x4_8x8,  i

            ; store sad_0, sad_1, sad_2, sad_3
            STNDW           sad_1:sad_0, *scores++
            STNDW           sad_3:sad_2, *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x3_16x16_ti -- sad_x3 on 16x16 block                      *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x3_16x16_ti"
		.global _x264_pixel_sad_x3_16x16_ti
_x264_pixel_sad_x3_16x16_ti .cproc fenc, pix0, pix1, pix2, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2
            .reg            pix_8x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ADD             pix0,       8,          pup0     ; pup0 = pix0 + 8
            ADD             pix1,       8,          pup1     ; pup1 = pix1 + 8
            ADD             pix2,       8,          pup2     ; pup2 = pix2 + 8
            SHR				i_stride,   3,          pix_8x   ; pix_8x = i_stride >> 3
            MVK             15,         i                    ; i = 15

loop_sad_x3_16x16: .trip    16,         16,         16       ; loop count
            LDNDW           *fenc++,    src_7654:src_3210
            LDNDW           *fenc++,    src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
   [i]      BDEC            loop_sad_x3_16x16,  i

            ; store sad_0, sad_1, sad_2
            STNDW           sad_1:sad_0, *scores++
            STNW            sad_2,       *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x3_16x8_ti -- sad_x3 on 16x8 block                        *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x3_16x8_ti"
		.global _x264_pixel_sad_x3_16x8_ti
_x264_pixel_sad_x3_16x8_ti .cproc fenc, pix0, pix1, pix2, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2
            .reg            pix_8x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ADD             pix0,       8,          pup0     ; pup0 = pix0 + 8
            ADD             pix1,       8,          pup1     ; pup1 = pix1 + 8
            ADD             pix2,       8,          pup2     ; pup2 = pix2 + 8
            SHR				i_stride,   3,          pix_8x   ; pix_8x = i_stride >> 3
            MVK             7,          i                    ; i = 7

loop_sad_x3_16x8: .trip     8,          8,          8        ; loop count
            LDNDW           *fenc++,    src_7654:src_3210
            LDNDW           *fenc++,    src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_8x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_8x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
   [i]      BDEC            loop_sad_x3_16x8,  i

            ; store sad_0, sad_1, sad_2
            STNDW           sad_1:sad_0, *scores++
            STNW            sad_2,       *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x3_8x16_ti -- sad_x3 on 8x16 block                        *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x3_8x16_ti"
		.global _x264_pixel_sad_x3_8x16_ti
_x264_pixel_sad_x3_8x16_ti .cproc fenc, pix0, pix1, pix2, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2
            .reg            pix_4x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ADD             pix0,       i_stride,   pup0     ; pup0 = pix0 + i_stride
            ADD             pix1,       i_stride,   pup1     ; pup1 = pix1 + i_stride
            ADD             pix2,       i_stride,   pup2     ; pup2 = pix2 + i_stride
            SHR				i_stride,   2,          pix_4x   ; pix_4x = i_stride >> 2
            MVK             7,          i                    ; i = 7

loop_sad_x3_8x16: .trip     8,          8,          8        ; loop count
            LDNDW           *fenc++[2], src_7654:src_3210
            LDNDW           *fenc++[2], src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
   [i]      BDEC            loop_sad_x3_8x16,  i

            ; store sad_0, sad_1, sad_2
            STNDW           sad_1:sad_0, *scores++
            STNW            sad_2,       *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_sad_x3_8x8_ti -- sad_x3 on 8x8 block                          *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_sad_x3_8x8_ti"
		.global _x264_pixel_sad_x3_8x8_ti
_x264_pixel_sad_x3_8x8_ti .cproc fenc, pix0, pix1, pix2, i_stride, scores
			.no_mdep

            .reg            src_FEDC:src_BA98, src_7654:src_3210
            .reg            ref_FEDC:ref_BA98, ref_7654:ref_3210
            .reg            diff_0, diff_1, diff_2, diff_3
            .reg            sad0_0, sad0_1, sad0_2, sad0_3
            .reg            sad1_0, sad1_1, sad1_2, sad1_3
            .reg            sad2_0, sad2_1, sad2_2, sad2_3
            .reg            sad_2, sad_1:sad_0
            .reg            pup0, pup1, pup2
            .reg            pix_4x, k_1, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                  ; k_1 = 0x01010101
            ZERO            sad_0                            ; sad_0 = 0
            ZERO            sad_1                            ; sad_1 = 0
            ZERO            sad_2                            ; sad_2 = 0
            ADD             pix0,       i_stride,   pup0     ; pup0 = pix0 + i_stride
            ADD             pix1,       i_stride,   pup1     ; pup1 = pix1 + i_stride
            ADD             pix2,       i_stride,   pup2     ; pup2 = pix2 + i_stride
            SHR				i_stride,   2,          pix_4x   ; pix_4x = i_stride >> 2
            MVK             3,          i                    ; i = 3

loop_sad_x3_8x8: .trip      4,          4,          4        ; loop count
            LDNDW           *fenc++[2], src_7654:src_3210
            LDNDW           *fenc++[2], src_FEDC:src_BA98    ; FENC_STRIDE = 16

            ; load pix0 and calculate sad
            LDNDW           *pix0++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup0++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad0_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad0_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad0_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad0_3   ; diff[C+D+E+F]

            ; load pix1 and calculate sad
            LDNDW           *pix1++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup1++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad1_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad1_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad1_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad1_3   ; diff[C+D+E+F]

            ; load pix2 and calculate sad
            LDNDW           *pix2++[pix_4x], ref_7654:ref_3210
            LDNDW           *pup2++[pix_4x], ref_FEDC:ref_BA98
            SUBABS4         src_3210,   ref_3210,   diff_0   ; diff[0-3]
            SUBABS4         src_7654,   ref_7654,   diff_1   ; diff[4-7]
            SUBABS4         src_BA98,   ref_BA98,   diff_2   ; diff[8-B]
            SUBABS4         src_FEDC,   ref_FEDC,   diff_3   ; diff[C-F]
            DOTPU4          diff_0,     k_1,        sad2_0   ; diff[0+1+2+3]
            DOTPU4          diff_1,     k_1,        sad2_1   ; diff[4+5+6+7]
            DOTPU4          diff_2,     k_1,        sad2_2   ; diff[8+9+A+B]
            DOTPU4          diff_3,     k_1,        sad2_3   ; diff[C+D+E+F]

            ; accumulate sad_0, sad_1, sad_2
            ADD             sad_0,      sad0_0,     sad_0
            ADD             sad_1,      sad1_0,     sad_1
            ADD             sad_2,      sad2_0,     sad_2
            ADD             sad_0,      sad0_1,     sad_0
            ADD             sad_1,      sad1_1,     sad_1
            ADD             sad_2,      sad2_1,     sad_2
            ADD             sad_0,      sad0_2,     sad_0
            ADD             sad_1,      sad1_2,     sad_1
            ADD             sad_2,      sad2_2,     sad_2
            ADD             sad_0,      sad0_3,     sad_0
            ADD             sad_1,      sad1_3,     sad_1
            ADD             sad_2,      sad2_3,     sad_2
   [i]      BDEC            loop_sad_x3_8x8,  i

            ; store sad_0, sad_1, sad_2
            STNDW           sad_1:sad_0, *scores++
            STNW            sad_2,       *scores++

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_satd_4x4_ti -- satd on 4x4 block (memory unaligned)           *;
;                                                                           *;
;  this function calculates satd by following flow:                         *;
;  1. get diff matrix by subtraction between pix1 and pix2.                 *;
;  2. first hadamard transform by rows, results go to a temp matrix.        *;
;     fast butterfly operation is done by two calls of addsub2 instruction. *;
;  3. final hadamard transform by columns. same instructions as above.      *;
;  4. sum abs of final matrix by abs2 and dotp2 instructions.               *;
;                                                                           *;
;  e.g. pix1 matrix    pix2 matrix    diff matrix                           *;
;       80 80 80 80    21 20 21 22    5F 60 5F 5E                           *;
;       80 80 80 80    21 21 21 21    5F 5F 5F 5F                           *;
;       80 80 80 80    13 11 12 16    6D 6F 6E 6A                           *;
;       80 80 80 80    77 85 86 65    09 -5 -6 1B                           *;
;                                                                           *;
;       temp matrix by first-pass hadamard:                                 *;
;       017C        0000        0002        FFFE(-0002)                     *;
;       017C        0000        0000        0000                            *;
;       01B4        0002        0004        FFFA(-0006)                     *;
;       0019        FFED(-0012) FFEF(-0011) 002F                            *;
;                                                                           *;
;       final matrix by final-pass hadamard:                                *;
;       04C5        FFEF(-0011) FFF5(-000B) 0027                            *;
;       019B        0015        0017        FFC9(-0037)                     *;
;       012B        0011        000F        FFD5(-002B)                     *;
;       FE65(-019B) FFEB(-0015) FFED(-0013) 0033                            *;
;                                                                           *;
; satd = (04C5 + 019B + 012B + 019B + 0011 + 0015 + 0011 + 0015 +           *;
;         000B + 0017 + 000F + 0013 + 0027 + 0037 + 002B + 0033) >> 1       *;
;      = 0A72 >> 1 = 1337 (decimal)                                         *;
;                                                                           *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_satd_4x4_ti"
        .global _x264_pixel_satd_4x4_ti
_x264_pixel_satd_4x4_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg			pix1_3210, pix2_3210
            .reg			pix1_32, pix1_10, pix2_32, pix2_10
            .reg			diff_32, diff_10, diff_31:diff_20
            .reg			had_01_00:had_03_02
            .reg			had_11_10:had_13_12
            .reg			had_21_20:had_23_22
            .reg			had_31_30:had_33_32
            .reg			had_21_01:had_20_00
            .reg			had_31_11:had_30_10
            .reg			had_23_03:had_22_02
            .reg			had_33_13:had_32_12
            .reg			s23_s01:d23_d01, d23_s23:d01_s01
            .reg			satd, satd_1, satd_2, dotp_1, dotp_2, abs_1, abs_2, k_1
            .reg			i_pix1_4x, i_pix2_4x

            MVKL            0x00010001, k_1
            MVKH            0x00010001, k_1                 ; k_1 = 0x00010001
            SHR             i_pix1,     2,       i_pix1_4x  ; i_pix1_4x = i_pix1 >> 2
            SHR				i_pix2,     2,       i_pix2_4x  ; i_pix2_4x = i_pix2 >> 2
            ZERO            satd_1                          ; satd_1 = 0
            ZERO            satd_2                          ; satd_2 = 0

            ; 1st line of first-pass hadamard
            LDNW            *pix1++[i_pix1_4x], pix1_3210   ; 4 bytes of pix1 line 1
            LDNW            *pix2++[i_pix2_4x], pix2_3210   ; 4 bytes of pix2 line 1
            UNPKHU4			pix1_3210,  pix1_32             ; pix1_32 (32 bit): | 00000000 | pix1[3] | 00000000 | pix1[2] |
            UNPKLU4			pix1_3210,  pix1_10             ; pix1_10 (32 bit): | 00000000 | pix1[1] | 00000000 | pix1[0] |
            UNPKHU4			pix2_3210,  pix2_32             ; pix2_32 (32 bit): | 00000000 | pix2[3] | 00000000 | pix2[2] |
            UNPKLU4			pix2_3210,  pix2_10             ; pix2_10 (32 bit): | 00000000 | pix2[1] | 00000000 | pix2[0] |
            SUB2			pix1_32,    pix2_32,    diff_32 ; d[3] = pix1[3] - pix2[3], d[2] = pix1[2] - pix2[2]
            SUB2			pix1_10,    pix2_10,    diff_10 ; d[1] = pix1[1] - pix2[1], d[0] = pix1[0] - pix2[0]
            DPACK2			diff_32,    diff_10,    diff_31:diff_20
            ADDSUB2			diff_20,    diff_31,    s23_s01:d23_d01 ; (64 bit): | (d[2]+d[3]) | (d[0]+d[1]) | (d[2]-d[3]) | (d[0]-d[1]) |
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    had_01_00:had_03_02 ; (64 bit): | (d01+d23) | (s01+s23) | (d01-d23) | (s01-s23) |

            ; 2nd line of first-pass hadamard
            LDNW            *pix1++[i_pix1_4x], pix1_3210   ; 4 bytes of pix1 line 2
            LDNW            *pix2++[i_pix2_4x], pix2_3210   ; 4 bytes of pix2 line 2
            UNPKHU4			pix1_3210,  pix1_32
            UNPKLU4			pix1_3210,  pix1_10
            UNPKHU4			pix2_3210,  pix2_32
            UNPKLU4			pix2_3210,  pix2_10
            SUB2			pix1_32,    pix2_32,    diff_32
            SUB2			pix1_10,    pix2_10,    diff_10
            DPACK2			diff_32,    diff_10,    diff_31:diff_20
            ADDSUB2			diff_20,    diff_31,    s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    had_11_10:had_13_12 ; save 2nd line of temp matrix

            ; 3rd line of first-pass hadamard
            LDNW            *pix1++[i_pix1_4x], pix1_3210   ; 4 bytes of pix1 line 3
            LDNW            *pix2++[i_pix2_4x], pix2_3210   ; 4 bytes of pix2 line 3
            UNPKHU4			pix1_3210,  pix1_32
            UNPKLU4			pix1_3210,  pix1_10
            UNPKHU4			pix2_3210,  pix2_32
            UNPKLU4			pix2_3210,  pix2_10
            SUB2			pix1_32,    pix2_32,    diff_32
            SUB2			pix1_10,    pix2_10,    diff_10
            DPACK2			diff_32,    diff_10,    diff_31:diff_20
            ADDSUB2			diff_20,    diff_31,    s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    had_21_20:had_23_22 ; save 3rd line of temp matrix

            ; 4th line of first-pass hadamard
            LDNW            *pix1++[i_pix1_4x], pix1_3210   ; 4 bytes of pix1 line 4
            LDNW            *pix2++[i_pix2_4x], pix2_3210   ; 4 bytes of pix2 line 4
            UNPKHU4			pix1_3210,  pix1_32
            UNPKLU4			pix1_3210,  pix1_10
            UNPKHU4			pix2_3210,  pix2_32
            UNPKLU4			pix2_3210,  pix2_10
            SUB2			pix1_32,    pix2_32,    diff_32
            SUB2			pix1_10,    pix2_10,    diff_10
            DPACK2			diff_32,    diff_10,    diff_31:diff_20
            ADDSUB2			diff_20,    diff_31,    s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    had_31_30:had_33_32 ; save 4th line of temp matrix

            ; exchange rows to columns of temp matrix
            DPACK2			had_21_20,  had_01_00,  had_21_01:had_20_00 ; 1st column
            DPACK2			had_31_30,  had_11_10,  had_31_11:had_30_10 ; 2nd column
            DPACK2			had_23_22,  had_03_02,  had_23_03:had_22_02 ; 3rd column
            DPACK2			had_33_32,  had_13_12,  had_33_13:had_32_12 ; 4th column

            ; 1st column of final-pass hadamard and sum abs
            ADDSUB2			had_20_00,  had_30_10,  s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    s23_s01:d23_d01
            ABS2			s23_s01,    abs_1
            ABS2			d23_d01,    abs_2
            DOTP2			abs_1,      k_1,        dotp_1
            DOTP2			abs_2,      k_1,        dotp_2
            ADD				satd_1,     dotp_1,     satd_1
            ADD				satd_2,     dotp_2,     satd_2

            ; 2nd column of final-pass hadamard and sum abs
            ADDSUB2			had_21_01,  had_31_11,  s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    s23_s01:d23_d01
            ABS2			s23_s01,    abs_1
            ABS2			d23_d01,    abs_2
            DOTP2			abs_1,      k_1,        dotp_1
            DOTP2			abs_2,      k_1,        dotp_2
            ADD				satd_1,     dotp_1,     satd_1
            ADD				satd_2,     dotp_2,     satd_2

            ; 3rd column of final-pass hadamard and sum abs
            ADDSUB2			had_22_02,  had_32_12,  s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    s23_s01:d23_d01
            ABS2			s23_s01,    abs_1
            ABS2			d23_d01,    abs_2
            DOTP2			abs_1,      k_1,        dotp_1
            DOTP2			abs_2,      k_1,        dotp_2
            ADD				satd_1,     dotp_1,     satd_1
            ADD				satd_2,     dotp_2,     satd_2

            ; 4th column of final-pass hadamard and sum abs
            ADDSUB2			had_23_03,  had_33_13,  s23_s01:d23_d01
            DPACK2			d23_d01,    s23_s01,    d23_s23:d01_s01
            ADDSUB2			d01_s01,    d23_s23,    s23_s01:d23_d01
            ABS2			s23_s01,    abs_1
            ABS2			d23_d01,    abs_2
            DOTP2			abs_1,      k_1,        dotp_1
            DOTP2			abs_2,      k_1,        dotp_2
            ADD				satd_1,     dotp_1,     satd_1
            ADD				satd_2,     dotp_2,     satd_2

            ; satd = (satd_1 + satd_2) >> 1
            ADD				satd_1,     satd_2,     satd
            SHR				satd,       1,          satd
            .return         satd
            .endproc

;* ======================================================================== *;
;* x264_pixel_satd_8x8_ti -- satd on 8x8 block (memory unaligned)           *;
;*                                                                          *;
;* This function divides 8x8 block to 4 sub-4x4 blocks.                     *;
;* For each 4x4 block,  do hadarmard transform and calculate satd.          *;
;* We then sum up all satds of 4x4 blocks as return value.                  *;
;* Process order of 4x4 blocks is as following:                             *;
;* | 0 | 1 |                                                                *;
;* | 2 | 3 |                                                                *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_satd_8x8_ti"
        .global _x264_pixel_satd_8x8_ti
_x264_pixel_satd_8x8_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg			pix1_hi_3210:pix1_lo_3210
            .reg			pix2_hi_3210:pix2_lo_3210
            .reg			pix1_lo_32, pix1_lo_10, pix2_lo_32, pix2_lo_10
            .reg			pix1_hi_32, pix1_hi_10, pix2_hi_32, pix2_hi_10
            .reg			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            .reg			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            .reg			had_lo_01_00:had_lo_03_02
            .reg			had_lo_11_10:had_lo_13_12
            .reg			had_lo_21_20:had_lo_23_22
            .reg			had_lo_31_30:had_lo_33_32
            .reg			had_hi_01_00:had_hi_03_02
            .reg			had_hi_11_10:had_hi_13_12
            .reg			had_hi_21_20:had_hi_23_22
            .reg			had_hi_31_30:had_hi_33_32
            .reg			had_lo_21_01:had_lo_20_00
            .reg			had_lo_31_11:had_lo_30_10
            .reg			had_lo_23_03:had_lo_22_02
            .reg			had_lo_33_13:had_lo_32_12
            .reg			had_hi_21_01:had_hi_20_00
            .reg			had_hi_31_11:had_hi_30_10
            .reg			had_hi_23_03:had_hi_22_02
            .reg			had_hi_33_13:had_hi_32_12
            .reg			s23_s01_lo:d23_d01_lo, d23_s23_lo:d01_s01_lo
            .reg			s23_s01_hi:d23_d01_hi, d23_s23_hi:d01_s01_hi
            .reg            satd_lo_1, satd_lo_2, satd_hi_1, satd_hi_2
            .reg            dotp_lo_1, dotp_lo_2, dotp_hi_1, dotp_hi_2
            .reg            abs_lo_1, abs_lo_2, abs_hi_1, abs_hi_2
            .reg			satd, satd_1, satd_2
            .reg			i_pix1_8x, i_pix2_8x, k_1

            MVKL            0x00010001,   k_1
            MVKH            0x00010001,   k_1                     ; k_1 = 0x00010001
            SHR             i_pix1,       3,            i_pix1_8x ; i_pix1_8x = i_pix1 >> 3
            SHR				i_pix2,       3,            i_pix2_8x ; i_pix2_8x = i_pix2 >> 3
            ZERO            satd_lo_1                             ; satd_lo_1 = 0
            ZERO            satd_lo_2                             ; satd_lo_2 = 0
            ZERO            satd_hi_1                             ; satd_hi_1 = 0
            ZERO            satd_hi_2                             ; satd_hi_2 = 0

            ; 1st line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 1
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 1
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_01_00:had_lo_03_02
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_01_00:had_hi_03_02

            ; 2nd line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 2
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 2
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_11_10:had_lo_13_12
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_11_10:had_hi_13_12

            ; 3rd line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 3
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 3
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_21_20:had_lo_23_22
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_21_20:had_hi_23_22

            ; 4th line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 4
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 4
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_31_30:had_lo_33_32
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_31_30:had_hi_33_32

            ; exchange rows to columns of temp low matrix
            DPACK2			had_lo_21_20, had_lo_01_00, had_lo_21_01:had_lo_20_00 ; 1st column of temp low matrix
            DPACK2			had_lo_31_30, had_lo_11_10, had_lo_31_11:had_lo_30_10 ; 2nd column of temp low matrix
            DPACK2			had_lo_23_22, had_lo_03_02, had_lo_23_03:had_lo_22_02 ; 3rd column of temp low matrix
            DPACK2			had_lo_33_32, had_lo_13_12, had_lo_33_13:had_lo_32_12 ; 4th column of temp low matrix
            DPACK2			had_hi_21_20, had_hi_01_00, had_hi_21_01:had_hi_20_00 ; 1st column of temp high matrix
            DPACK2			had_hi_31_30, had_hi_11_10, had_hi_31_11:had_hi_30_10 ; 2nd column of temp high matrix
            DPACK2			had_hi_23_22, had_hi_03_02, had_hi_23_03:had_hi_22_02 ; 3rd column of temp high matrix
            DPACK2			had_hi_33_32, had_hi_13_12, had_hi_33_13:had_hi_32_12 ; 4th column of temp high matrix

            ; 1st column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_20_00, had_lo_30_10, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_20_00, had_hi_30_10, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 2nd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_21_01, had_lo_31_11, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_21_01, had_hi_31_11, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 3rd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_22_02, had_lo_32_12, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_22_02, had_hi_32_12, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 4th column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_23_03, had_lo_33_13, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_23_03, had_hi_33_13, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 1st line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 4
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 4
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_01_00:had_lo_03_02
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_01_00:had_hi_03_02

            ; 2nd line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 5
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 5
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_11_10:had_lo_13_12
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_11_10:had_hi_13_12

            ; 3rd line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 6
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 6
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_21_20:had_lo_23_22
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_21_20:had_hi_23_22

            ; 4th line of first-pass hadamard
            LDNDW           *pix1++[i_pix1_8x], pix1_hi_3210:pix1_lo_3210 ; 8 bytes of pix1 line 7
            LDNDW           *pix2++[i_pix2_8x], pix2_hi_3210:pix2_lo_3210 ; 8 bytes of pix2 line 7
            UNPKHU4			pix1_lo_3210, pix1_lo_32
            UNPKLU4			pix1_lo_3210, pix1_lo_10
            UNPKHU4			pix2_lo_3210, pix2_lo_32
            UNPKLU4			pix2_lo_3210, pix2_lo_10
            UNPKHU4			pix1_hi_3210, pix1_hi_32
            UNPKLU4			pix1_hi_3210, pix1_hi_10
            UNPKHU4			pix2_hi_3210, pix2_hi_32
            UNPKLU4			pix2_hi_3210, pix2_hi_10
            SUB2			pix1_lo_32,   pix2_lo_32,   diff_lo_32
            SUB2			pix1_lo_10,   pix2_lo_10,   diff_lo_10
            SUB2			pix1_hi_32,   pix2_hi_32,   diff_hi_32
            SUB2			pix1_hi_10,   pix2_hi_10,   diff_hi_10
            DPACK2			diff_lo_32,   diff_lo_10,   diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32,   diff_hi_10,   diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20,   diff_lo_31,   s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20,   diff_hi_31,   s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   had_lo_31_30:had_lo_33_32
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   had_hi_31_30:had_hi_33_32

            ; exchange rows to columns of temp low matrix
            DPACK2			had_lo_21_20, had_lo_01_00, had_lo_21_01:had_lo_20_00 ; 1st column of temp low matrix
            DPACK2			had_lo_31_30, had_lo_11_10, had_lo_31_11:had_lo_30_10 ; 2nd column of temp low matrix
            DPACK2			had_lo_23_22, had_lo_03_02, had_lo_23_03:had_lo_22_02 ; 3rd column of temp low matrix
            DPACK2			had_lo_33_32, had_lo_13_12, had_lo_33_13:had_lo_32_12 ; 4th column of temp low matrix
            DPACK2			had_hi_21_20, had_hi_01_00, had_hi_21_01:had_hi_20_00 ; 1st column of temp high matrix
            DPACK2			had_hi_31_30, had_hi_11_10, had_hi_31_11:had_hi_30_10 ; 2nd column of temp high matrix
            DPACK2			had_hi_23_22, had_hi_03_02, had_hi_23_03:had_hi_22_02 ; 3rd column of temp high matrix
            DPACK2			had_hi_33_32, had_hi_13_12, had_hi_33_13:had_hi_32_12 ; 4th column of temp high matrix

            ; 1st column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_20_00, had_lo_30_10, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_20_00, had_hi_30_10, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 2nd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_21_01, had_lo_31_11, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_21_01, had_hi_31_11, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 3rd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_22_02, had_lo_32_12, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_22_02, had_hi_32_12, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; 4th column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_23_03, had_lo_33_13, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_23_03, had_hi_33_13, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo,   s23_s01_lo,   d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi,   s23_s01_hi,   d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo,   d23_s23_lo,   s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi,   d23_s23_hi,   s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo,   abs_lo_1
            ABS2			s23_s01_hi,   abs_hi_1
            ABS2			d23_d01_lo,   abs_lo_2
            ABS2			d23_d01_hi,   abs_hi_2
            DOTP2			abs_lo_1,     k_1,          dotp_lo_1
            DOTP2			abs_hi_1,     k_1,          dotp_hi_1
            DOTP2			abs_lo_2,     k_1,          dotp_lo_2
            DOTP2			abs_hi_2,     k_1,          dotp_hi_2
            ADD				satd_lo_1,    dotp_lo_1,    satd_lo_1
            ADD				satd_hi_1,    dotp_hi_1,    satd_hi_1
            ADD				satd_lo_2,    dotp_lo_2,    satd_lo_2
            ADD				satd_hi_2,    dotp_hi_2,    satd_hi_2

            ; satd = (satd_1 + satd_2) >> 1
            ADD             satd_lo_1,    satd_hi_1,    satd_1
            ADD             satd_lo_2,    satd_hi_2,    satd_2
            ADD				satd_1,       satd_2,       satd
            SHR				satd,         1,            satd
            .return         satd
            .endproc

;* ======================================================================== *;
;* x264_intra_satd_x3_4x4_ti -- intra_satd_x3 on 4x4 block                  *;
;* NOTE: this function suppose FDEC_STRIDE = 32 and FENC_STRIDE = 16.       *;
;* ======================================================================== *;
		.sect ".text:_x264_intra_satd_x3_4x4_ti"
        .global _x264_intra_satd_x3_4x4_ti
_x264_intra_satd_x3_4x4_ti .cproc fenc, fdec, res
            .no_mdep

            .reg			pix0_0_3210, pix0_1_3210, pix0_2_3210, pix0_3_3210, pix0_32, pix0_10
            .reg			pix1_0_x2, pix1_1_x2, pix1_2_x2, pix1_3_x2, pix2_32, pix2_10
            .reg			fdec_h, fdec_v0, fdec_v1, fdec_v2, fdec_v3, dc, pix3_x2
            .reg			dif1_32, dif1_10, dif1_31:dif1_20
            .reg			dif2_32, dif2_10, dif2_31:dif2_20
            .reg			dif3_32, dif3_10, dif3_31:dif3_20
            .reg			had1_01_00:had1_03_02
            .reg			had1_11_10:had1_13_12
            .reg			had1_21_20:had1_23_22
            .reg			had1_31_30:had1_33_32
            .reg			had1_21_01:had1_20_00
            .reg			had1_31_11:had1_30_10
            .reg			had1_23_03:had1_22_02
            .reg			had1_33_13:had1_32_12
            .reg			had2_01_00:had2_03_02
            .reg			had2_11_10:had2_13_12
            .reg			had2_21_20:had2_23_22
            .reg			had2_31_30:had2_33_32
            .reg			had2_21_01:had2_20_00
            .reg			had2_31_11:had2_30_10
            .reg			had2_23_03:had2_22_02
            .reg			had2_33_13:had2_32_12
            .reg			had3_01_00:had3_03_02
            .reg			had3_11_10:had3_13_12
            .reg			had3_21_20:had3_23_22
            .reg			had3_31_30:had3_33_32
            .reg			had3_21_01:had3_20_00
            .reg			had3_31_11:had3_30_10
            .reg			had3_23_03:had3_22_02
            .reg			had3_33_13:had3_32_12
            .reg			s23_s01_1:d23_d01_1, d23_s23_1:d01_s01_1
            .reg			s23_s01_2:d23_d01_2, d23_s23_2:d01_s01_2
            .reg			s23_s01_3:d23_d01_3, d23_s23_3:d01_s01_3
            .reg			abs1_1, abs1_2, abs2_1, abs2_2, abs3_1, abs3_2
            .reg			dotp1_1, dotp1_2, dotp2_1, dotp2_2, dotp3_1, dotp3_2
            .reg			satd_1:satd_2, satd_3
            .reg			fdec_lf, fdec_1x, k_1, k_dc

            MVKL            0x00010001, k_1
            MVKH            0x00010001, k_1                 ; k_1     = 0x00010001
            MVKL            0x01010101, k_dc
            MVKH            0x01010101, k_dc                ; k_dc    = 0x01010101
            MVK             32,         fdec_1x             ; fdec_1x = 32 (FDEC_STRIDE / 1)
            SUB             fdec,       1,          fdec_lf ; fdec_lf = fdec - 1

            ; load all pixels of fenc
            LDNW            *fenc++[4], pix0_0_3210
            LDNW            *fenc++[4], pix0_1_3210
            LDNW            *fenc++[4], pix0_2_3210
            LDNW            *fenc++[4], pix0_3_3210

            ; load vertical and horizontal pixels of fdec
            LDNW            *-fdec[8],  fdec_h
            LDBU            *fdec_lf++[fdec_1x], fdec_v0
            LDBU            *fdec_lf++[fdec_1x], fdec_v1
            LDBU            *fdec_lf++[fdec_1x], fdec_v2
            LDBU            *fdec_lf++[fdec_1x], fdec_v3

            ; predict_4x4_h
            PACK2           fdec_v0,    fdec_v0,    pix1_0_x2
            PACK2           fdec_v1,    fdec_v1,    pix1_1_x2
            PACK2           fdec_v2,    fdec_v2,    pix1_2_x2
            PACK2           fdec_v3,    fdec_v3,    pix1_3_x2
            ; predict_4x4_v
            UNPKHU4			fdec_h,     pix2_32
            UNPKLU4			fdec_h,     pix2_10
            ; predict_4x4_dc
            DOTPU4          fdec_h,     k_dc,       dc
            ADD             dc,         fdec_v0,    dc
            ADD             dc,         fdec_v1,    dc
            ADD             dc,         fdec_v2,    dc
            ADD             dc,         fdec_v3,    dc
            ADD             dc,         4,          dc
            SHR             dc,         3,          dc
            PACK2           dc,         dc,         pix3_x2

            ; 1st line of first-pass hadamard
            UNPKHU4			pix0_0_3210, pix0_32
            UNPKLU4			pix0_0_3210, pix0_10
            SUB2			pix1_0_x2,  pix0_32,    dif1_32
            SUB2			pix1_0_x2,  pix0_10,    dif1_10
            SUB2			pix2_32,    pix0_32,    dif2_32
            SUB2			pix2_10,    pix0_10,    dif2_10
            SUB2			pix3_x2,    pix0_32,    dif3_32
            SUB2			pix3_x2,    pix0_10,    dif3_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            DPACK2			dif3_32,    dif3_10,    dif3_31:dif3_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            ADDSUB2			dif3_20,    dif3_31,    s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_01_00:had1_03_02
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_01_00:had2_03_02
            ADDSUB2			d01_s01_3,  d23_s23_3,  had3_01_00:had3_03_02

            ; 2nd line of first-pass hadamard
            UNPKHU4			pix0_1_3210, pix0_32
            UNPKLU4			pix0_1_3210, pix0_10
            SUB2			pix1_1_x2,  pix0_32,    dif1_32
            SUB2			pix1_1_x2,  pix0_10,    dif1_10
            SUB2			pix2_32,    pix0_32,    dif2_32
            SUB2			pix2_10,    pix0_10,    dif2_10
            SUB2			pix3_x2,    pix0_32,    dif3_32
            SUB2			pix3_x2,    pix0_10,    dif3_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            DPACK2			dif3_32,    dif3_10,    dif3_31:dif3_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            ADDSUB2			dif3_20,    dif3_31,    s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_11_10:had1_13_12
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_11_10:had2_13_12
            ADDSUB2			d01_s01_3,  d23_s23_3,  had3_11_10:had3_13_12

            ; 3rd line of first-pass hadamard
            UNPKHU4			pix0_2_3210, pix0_32
            UNPKLU4			pix0_2_3210, pix0_10
            SUB2			pix1_2_x2,  pix0_32,    dif1_32
            SUB2			pix1_2_x2,  pix0_10,    dif1_10
            SUB2			pix2_32,    pix0_32,    dif2_32
            SUB2			pix2_10,    pix0_10,    dif2_10
            SUB2			pix3_x2,    pix0_32,    dif3_32
            SUB2			pix3_x2,    pix0_10,    dif3_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            DPACK2			dif3_32,    dif3_10,    dif3_31:dif3_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            ADDSUB2			dif3_20,    dif3_31,    s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_21_20:had1_23_22
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_21_20:had2_23_22
            ADDSUB2			d01_s01_3,  d23_s23_3,  had3_21_20:had3_23_22

            ; 4th line of first-pass hadamard
            UNPKHU4			pix0_3_3210, pix0_32
            UNPKLU4			pix0_3_3210, pix0_10
            SUB2			pix1_3_x2,  pix0_32,    dif1_32
            SUB2			pix1_3_x2,  pix0_10,    dif1_10
            SUB2			pix2_32,    pix0_32,    dif2_32
            SUB2			pix2_10,    pix0_10,    dif2_10
            SUB2			pix3_x2,    pix0_32,    dif3_32
            SUB2			pix3_x2,    pix0_10,    dif3_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            DPACK2			dif3_32,    dif3_10,    dif3_31:dif3_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            ADDSUB2			dif3_20,    dif3_31,    s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_31_30:had1_33_32
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_31_30:had2_33_32
            ADDSUB2			d01_s01_3,  d23_s23_3,  had3_31_30:had3_33_32

            ; exchange rows to columns of temp matrix
            DPACK2			had1_21_20, had1_01_00, had1_21_01:had1_20_00
            DPACK2			had1_31_30, had1_11_10, had1_31_11:had1_30_10
            DPACK2			had1_23_22, had1_03_02, had1_23_03:had1_22_02
            DPACK2			had1_33_32, had1_13_12, had1_33_13:had1_32_12
            DPACK2			had2_21_20, had2_01_00, had2_21_01:had2_20_00
            DPACK2			had2_31_30, had2_11_10, had2_31_11:had2_30_10
            DPACK2			had2_23_22, had2_03_02, had2_23_03:had2_22_02
            DPACK2			had2_33_32, had2_13_12, had2_33_13:had2_32_12
            DPACK2			had3_21_20, had3_01_00, had3_21_01:had3_20_00
            DPACK2			had3_31_30, had3_11_10, had3_31_11:had3_30_10
            DPACK2			had3_23_22, had3_03_02, had3_23_03:had3_22_02
            DPACK2			had3_33_32, had3_13_12, had3_33_13:had3_32_12

            ; 1st column of final-pass hadamard
            ADDSUB2			had1_20_00, had1_30_10, s23_s01_1:d23_d01_1
            ADDSUB2			had2_20_00, had2_30_10, s23_s01_2:d23_d01_2
            ADDSUB2			had3_20_00, had3_30_10, s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ADDSUB2			d01_s01_3,  d23_s23_3,  s23_s01_3:d23_d01_3
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            ABS2			s23_s01_3,  abs3_1
            ABS2			d23_d01_3,  abs3_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            DOTP2			abs3_1,     k_1,        dotp3_1
            DOTP2			abs3_2,     k_1,        dotp3_2
            ADD             dotp1_1,    dotp1_2,    satd_1
            ADD             dotp2_1,    dotp2_2,    satd_2
            ADD             dotp3_1,    dotp3_2,    satd_3

            ; 2nd column of final-pass hadamard
            ADDSUB2			had1_21_01, had1_31_11, s23_s01_1:d23_d01_1
            ADDSUB2			had2_21_01, had2_31_11, s23_s01_2:d23_d01_2
            ADDSUB2			had3_21_01, had3_31_11, s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ADDSUB2			d01_s01_3,  d23_s23_3,  s23_s01_3:d23_d01_3
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            ABS2			s23_s01_3,  abs3_1
            ABS2			d23_d01_3,  abs3_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            DOTP2			abs3_1,     k_1,        dotp3_1
            DOTP2			abs3_2,     k_1,        dotp3_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_3,     dotp3_1,    satd_3
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ADD             satd_3,     dotp3_2,    satd_3

            ; 3rd column of final-pass hadamard
            ADDSUB2			had1_22_02, had1_32_12, s23_s01_1:d23_d01_1
            ADDSUB2			had2_22_02, had2_32_12, s23_s01_2:d23_d01_2
            ADDSUB2			had3_22_02, had3_32_12, s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ADDSUB2			d01_s01_3,  d23_s23_3,  s23_s01_3:d23_d01_3
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            ABS2			s23_s01_3,  abs3_1
            ABS2			d23_d01_3,  abs3_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            DOTP2			abs3_1,     k_1,        dotp3_1
            DOTP2			abs3_2,     k_1,        dotp3_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_3,     dotp3_1,    satd_3
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ADD             satd_3,     dotp3_2,    satd_3

            ; 4th column of final-pass hadamard
            ADDSUB2			had1_23_03, had1_33_13, s23_s01_1:d23_d01_1
            ADDSUB2			had2_23_03, had2_33_13, s23_s01_2:d23_d01_2
            ADDSUB2			had3_23_03, had3_33_13, s23_s01_3:d23_d01_3
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            DPACK2			d23_d01_3,  s23_s01_3,  d23_s23_3:d01_s01_3
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ADDSUB2			d01_s01_3,  d23_s23_3,  s23_s01_3:d23_d01_3
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            ABS2			s23_s01_3,  abs3_1
            ABS2			d23_d01_3,  abs3_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            DOTP2			abs3_1,     k_1,        dotp3_1
            DOTP2			abs3_2,     k_1,        dotp3_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_3,     dotp3_1,    satd_3
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ADD             satd_3,     dotp3_2,    satd_3

            ; store satd in order: v, h, dc
            SHR				satd_1,     1,          satd_1 ; satd_h
            SHR				satd_2,     1,          satd_2 ; satd_v
            SHR				satd_3,     1,          satd_3 ; satd_dc
            STNDW           satd_1:satd_2, *res++
            STNW            satd_3,        *res++
            .return
            .endproc

;* ======================================================================== *;
;* x264_intra_satd_x3_8x8c_ti -- intra_satd_x3 on 8x8 chroma block          *;
;* NOTE: this function suppose FDEC_STRIDE = 32 and FENC_STRIDE = 16.       *;
;* We calculates satd by order: h_up, v_up, dc_up, h_lo, v_lo, dc_lo.       *;
;* ======================================================================== *;
		.sect ".text:_x264_intra_satd_x3_8x8c_ti"
        .global _x264_intra_satd_x3_8x8c_ti
_x264_intra_satd_x3_8x8c_ti .cproc fenc, fdec, res
            .no_mdep

            .reg			fenc_0_hi_3210:fenc_0_lo_3210
            .reg			fenc_1_hi_3210:fenc_1_lo_3210
            .reg            fdec_h_hi:fdec_h_lo
            .reg            fdec_v0, fdec_v1, fdec_v2, fdec_v3
            .reg            fdec_v4, fdec_v5, fdec_v6, fdec_v7
            .reg            s_0, s_1, s_2, s_3
            .reg            dc_0, dc_1, dc_2, dc_3
            .reg			pix1_0_lo_32, pix1_0_lo_10
            .reg			pix1_0_hi_32, pix1_0_hi_10
            .reg			pix1_1_lo_32, pix1_1_lo_10
            .reg			pix1_1_hi_32, pix1_1_hi_10
            .reg			pix1_2_lo_32, pix1_2_lo_10
            .reg			pix1_2_hi_32, pix1_2_hi_10
            .reg			pix1_3_lo_32, pix1_3_lo_10
            .reg			pix1_3_hi_32, pix1_3_hi_10
            .reg            pix2_lo_32, pix2_lo_10, pix2_hi_32, pix2_hi_10
            .reg            pix2_0, pix2_1, pix2_2, pix2_3
            .reg			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            .reg			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            .reg			had_lo_01_00:had_lo_03_02
            .reg			had_lo_11_10:had_lo_13_12
            .reg			had_lo_21_20:had_lo_23_22
            .reg			had_lo_31_30:had_lo_33_32
            .reg			had_hi_01_00:had_hi_03_02
            .reg			had_hi_11_10:had_hi_13_12
            .reg			had_hi_21_20:had_hi_23_22
            .reg			had_hi_31_30:had_hi_33_32
            .reg			had_lo_21_01:had_lo_20_00
            .reg			had_lo_31_11:had_lo_30_10
            .reg			had_lo_23_03:had_lo_22_02
            .reg			had_lo_33_13:had_lo_32_12
            .reg			had_hi_21_01:had_hi_20_00
            .reg			had_hi_31_11:had_hi_30_10
            .reg			had_hi_23_03:had_hi_22_02
            .reg			had_hi_33_13:had_hi_32_12
            .reg			s23_s01_lo:d23_d01_lo, d23_s23_lo:d01_s01_lo
            .reg			s23_s01_hi:d23_d01_hi, d23_s23_hi:d01_s01_hi
            .reg            satd_lo_1, satd_lo_2, satd_hi_1, satd_hi_2
            .reg            dotp_lo_1, dotp_lo_2, dotp_hi_1, dotp_hi_2
            .reg            abs_lo_1, abs_lo_2, abs_hi_1, abs_hi_2
            .reg			satd_h:satd_d, satd_v, satd_1, satd_2
            .reg			fdec_lf, fdec_1x, k_1, k_dc, i

            MVKL            0x00010001, k_1
            MVKH            0x00010001, k_1                 ; k_1  = 0x00010001
            MVKL            0x01010101, k_dc
            MVKH            0x01010101, k_dc                ; k_dc = 0x01010101
            MVK             32,         fdec_1x             ; fdec_1x = 32 (FDEC_STRIDE / 1)
            SUB             fdec,       1,          fdec_lf ; fdec_lf = fdec - 1
            ZERO            satd_d                          ; satd_d = 0
            ZERO            satd_h                          ; satd_h = 0
            ZERO            satd_v                          ; satd_v = 0

            ; load upper half pixels of fenc
            LDNDW           *fenc++[2], fenc_0_hi_3210:fenc_0_lo_3210
            LDNDW           *fenc++[2], fenc_1_hi_3210:fenc_1_lo_3210
            UNPKHU4			fenc_0_hi_3210, pix1_0_hi_32
            UNPKLU4         fenc_0_hi_3210, pix1_0_hi_10
            UNPKHU4			fenc_0_lo_3210, pix1_0_lo_32
            UNPKLU4         fenc_0_lo_3210, pix1_0_lo_10
            UNPKHU4			fenc_1_hi_3210, pix1_1_hi_32
            UNPKLU4         fenc_1_hi_3210, pix1_1_hi_10
            UNPKHU4			fenc_1_lo_3210, pix1_1_lo_32
            UNPKLU4         fenc_1_lo_3210, pix1_1_lo_10
            LDNDW           *fenc++[2], fenc_0_hi_3210:fenc_0_lo_3210
            LDNDW           *fenc++[2], fenc_1_hi_3210:fenc_1_lo_3210
            UNPKHU4			fenc_0_hi_3210, pix1_2_hi_32
            UNPKLU4         fenc_0_hi_3210, pix1_2_hi_10
            UNPKHU4			fenc_0_lo_3210, pix1_2_lo_32
            UNPKLU4         fenc_0_lo_3210, pix1_2_lo_10
            UNPKHU4			fenc_1_hi_3210, pix1_3_hi_32
            UNPKLU4         fenc_1_hi_3210, pix1_3_hi_10
            UNPKHU4			fenc_1_lo_3210, pix1_3_lo_32
            UNPKLU4         fenc_1_lo_3210, pix1_3_lo_10

            ; load vertical and horizontal pixels of fdec
            LDNDW           *-fdec[4],  fdec_h_hi:fdec_h_lo
            LDBU            *fdec_lf++[fdec_1x], fdec_v0
            LDBU            *fdec_lf++[fdec_1x], fdec_v1
            LDBU            *fdec_lf++[fdec_1x], fdec_v2
            LDBU            *fdec_lf++[fdec_1x], fdec_v3
            LDBU            *fdec_lf++[fdec_1x], fdec_v4
            LDBU            *fdec_lf++[fdec_1x], fdec_v5
            LDBU            *fdec_lf++[fdec_1x], fdec_v6
            LDBU            *fdec_lf++[fdec_1x], fdec_v7

            ; predict_8x8c_dc
            DOTPU4          fdec_h_lo,  k_dc,       s_0 ; s_0 = h[3] + h[2] + h[1] + h[0]
            DOTPU4          fdec_h_hi,  k_dc,       s_1 ; s_1 = h[7] + h[6] + h[5] + h[4]
            ADD             fdec_v0,    fdec_v1,    s_2 ; s_2 = v[3] + v[2] + v[1] + v[0]
            ADD             fdec_v4,    fdec_v5,    s_3 ; s_3 = v[7] + v[6] + v[5] + v[4]
            ADD             s_2,        fdec_v2,    s_2
            ADD             s_3,        fdec_v6,    s_3
            ADD             s_2,        fdec_v3,    s_2
            ADD             s_3,        fdec_v7,    s_3
            ADD             s_0,        s_2,        dc_0
            ADD             s_1,        s_3,        dc_3
            ADD             s_1,        2,          dc_1
            ADD             s_3,        2,          dc_2
            ADD             dc_0,       4,          dc_0
            ADD             dc_3,       4,          dc_3
            SHR             dc_0,       3,          dc_0 ; dc_0 = (s0 + s2 + 4) >> 3
            SHR             dc_3,       3,          dc_3 ; dc_3 = (s1 + s3 + 4) >> 3
            SHR             dc_1,       2,          dc_1 ; dc_1 = (s1 + 2) >> 2
            SHR             dc_2,       2,          dc_2 ; dc_2 = (s3 + 2) >> 2

            ; STEP 1: upper half of predict_8x8c_h
            PACK2           fdec_v0,    fdec_v0,    pix2_0
            PACK2           fdec_v1,    fdec_v1,    pix2_1
            PACK2           fdec_v2,    fdec_v2,    pix2_2
            PACK2           fdec_v3,    fdec_v3,    pix2_3
           ; 1st line of first-pass hadamard
            SUB2			pix1_0_lo_32, pix2_0,   diff_lo_32
            SUB2			pix1_0_lo_10, pix2_0,   diff_lo_10
            SUB2			pix1_0_hi_32, pix2_0,   diff_hi_32
            SUB2			pix1_0_hi_10, pix2_0,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_01_00:had_lo_03_02
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_01_00:had_hi_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_lo_32, pix2_1,   diff_lo_32
            SUB2			pix1_1_lo_10, pix2_1,   diff_lo_10
            SUB2			pix1_1_hi_32, pix2_1,   diff_hi_32
            SUB2			pix1_1_hi_10, pix2_1,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_11_10:had_lo_13_12
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_11_10:had_hi_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_lo_32, pix2_2,   diff_lo_32
            SUB2			pix1_2_lo_10, pix2_2,   diff_lo_10
            SUB2			pix1_2_hi_32, pix2_2,   diff_hi_32
            SUB2			pix1_2_hi_10, pix2_2,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_21_20:had_lo_23_22
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_21_20:had_hi_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_lo_32, pix2_3,   diff_lo_32
            SUB2			pix1_3_lo_10, pix2_3,   diff_lo_10
            SUB2			pix1_3_hi_32, pix2_3,   diff_hi_32
            SUB2			pix1_3_hi_10, pix2_3,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_31_30:had_lo_33_32
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_31_30:had_hi_33_32
            ; exchange rows to columns of temp low matrix
            DPACK2			had_lo_21_20, had_lo_01_00, had_lo_21_01:had_lo_20_00 ; 1st column of temp low matrix
            DPACK2			had_lo_31_30, had_lo_11_10, had_lo_31_11:had_lo_30_10 ; 2nd column of temp low matrix
            DPACK2			had_lo_23_22, had_lo_03_02, had_lo_23_03:had_lo_22_02 ; 3rd column of temp low matrix
            DPACK2			had_lo_33_32, had_lo_13_12, had_lo_33_13:had_lo_32_12 ; 4th column of temp low matrix
            DPACK2			had_hi_21_20, had_hi_01_00, had_hi_21_01:had_hi_20_00 ; 1st column of temp high matrix
            DPACK2			had_hi_31_30, had_hi_11_10, had_hi_31_11:had_hi_30_10 ; 2nd column of temp high matrix
            DPACK2			had_hi_23_22, had_hi_03_02, had_hi_23_03:had_hi_22_02 ; 3rd column of temp high matrix
            DPACK2			had_hi_33_32, had_hi_13_12, had_hi_33_13:had_hi_32_12 ; 4th column of temp high matrix
            ; 1st column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_20_00, had_lo_30_10, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_20_00, had_hi_30_10, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        satd_lo_1
            DOTP2			abs_hi_1,   k_1,        satd_hi_1
            DOTP2			abs_lo_2,   k_1,        satd_lo_2
            DOTP2			abs_hi_2,   k_1,        satd_hi_2
            ; 2nd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_21_01, had_lo_31_11, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_21_01, had_hi_31_11, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 3rd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_22_02, had_lo_32_12, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_22_02, had_hi_32_12, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 4th column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_23_03, had_lo_33_13, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_23_03, had_hi_33_13, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; satd = satd_lo_1 + satd_hi_1 + satd_lo_2 + satd_hi_2
            ADD             satd_lo_1,  satd_hi_1,  satd_1
            ADD             satd_lo_2,  satd_hi_2,  satd_2
            ADD				satd_h,     satd_1,     satd_h
            ADD				satd_h,     satd_2,     satd_h

            ; STEP 2: upper half of predict_8x8c_v
            UNPKHU4         fdec_h_hi,  pix2_hi_32
            UNPKLU4         fdec_h_hi,  pix2_hi_10
            UNPKHU4         fdec_h_lo,  pix2_lo_32
            UNPKLU4         fdec_h_lo,  pix2_lo_10
            MVK             1,          i
loop_intra_satd_x3_8x8c_hi: .trip 2,    2,          2
            ; 1st line of first-pass hadamard
            SUB2			pix1_0_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_0_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_0_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_0_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_01_00:had_lo_03_02
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_01_00:had_hi_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_1_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_1_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_1_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_11_10:had_lo_13_12
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_11_10:had_hi_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_2_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_2_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_2_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_21_20:had_lo_23_22
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_21_20:had_hi_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_3_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_3_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_3_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_31_30:had_lo_33_32
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_31_30:had_hi_33_32
            ; exchange rows to columns of temp low matrix
            DPACK2			had_lo_21_20, had_lo_01_00, had_lo_21_01:had_lo_20_00 ; 1st column of temp low matrix
            DPACK2			had_lo_31_30, had_lo_11_10, had_lo_31_11:had_lo_30_10 ; 2nd column of temp low matrix
            DPACK2			had_lo_23_22, had_lo_03_02, had_lo_23_03:had_lo_22_02 ; 3rd column of temp low matrix
            DPACK2			had_lo_33_32, had_lo_13_12, had_lo_33_13:had_lo_32_12 ; 4th column of temp low matrix
            DPACK2			had_hi_21_20, had_hi_01_00, had_hi_21_01:had_hi_20_00 ; 1st column of temp high matrix
            DPACK2			had_hi_31_30, had_hi_11_10, had_hi_31_11:had_hi_30_10 ; 2nd column of temp high matrix
            DPACK2			had_hi_23_22, had_hi_03_02, had_hi_23_03:had_hi_22_02 ; 3rd column of temp high matrix
            DPACK2			had_hi_33_32, had_hi_13_12, had_hi_33_13:had_hi_32_12 ; 4th column of temp high matrix
            ; 1st column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_20_00, had_lo_30_10, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_20_00, had_hi_30_10, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        satd_lo_1
            DOTP2			abs_hi_1,   k_1,        satd_hi_1
            DOTP2			abs_lo_2,   k_1,        satd_lo_2
            DOTP2			abs_hi_2,   k_1,        satd_hi_2
            ; 2nd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_21_01, had_lo_31_11, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_21_01, had_hi_31_11, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 3rd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_22_02, had_lo_32_12, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_22_02, had_hi_32_12, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 4th column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_23_03, had_lo_33_13, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_23_03, had_hi_33_13, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; satd = satd_lo_1 + satd_hi_1 + satd_lo_2 + satd_hi_2
            ADD             satd_lo_1,  satd_hi_1,  satd_1
            ADD             satd_lo_2,  satd_hi_2,  satd_2

            ; prepare data for next loop
  [!i]      B               loop_intra_satd_x3_8x8c_hi_end
            ADD             satd_v,     satd_1,     satd_v
            ADD             satd_v,     satd_2,     satd_v
            ; STEP 3: upper half of predict_8x8c_dc
            PACK2           dc_1,       dc_1,       pix2_hi_32
            PACK2           dc_1,       dc_1,       pix2_hi_10
            PACK2           dc_0,       dc_0,       pix2_lo_32
            PACK2           dc_0,       dc_0,       pix2_lo_10
  [i]       BDEC            loop_intra_satd_x3_8x8c_hi, i
loop_intra_satd_x3_8x8c_hi_end:
            ADD             satd_d,     satd_1,     satd_d
            ADD             satd_d,     satd_2,     satd_d

            ; load lower half pixels of fenc
            LDNDW           *fenc++[2], fenc_0_hi_3210:fenc_0_lo_3210
            LDNDW           *fenc++[2], fenc_1_hi_3210:fenc_1_lo_3210
            UNPKHU4			fenc_0_hi_3210, pix1_0_hi_32
            UNPKLU4         fenc_0_hi_3210, pix1_0_hi_10
            UNPKHU4			fenc_0_lo_3210, pix1_0_lo_32
            UNPKLU4         fenc_0_lo_3210, pix1_0_lo_10
            UNPKHU4			fenc_1_hi_3210, pix1_1_hi_32
            UNPKLU4         fenc_1_hi_3210, pix1_1_hi_10
            UNPKHU4			fenc_1_lo_3210, pix1_1_lo_32
            UNPKLU4         fenc_1_lo_3210, pix1_1_lo_10
            LDNDW           *fenc++[2], fenc_0_hi_3210:fenc_0_lo_3210
            LDNDW           *fenc++[2], fenc_1_hi_3210:fenc_1_lo_3210
            UNPKHU4			fenc_0_hi_3210, pix1_2_hi_32
            UNPKLU4         fenc_0_hi_3210, pix1_2_hi_10
            UNPKHU4			fenc_0_lo_3210, pix1_2_lo_32
            UNPKLU4         fenc_0_lo_3210, pix1_2_lo_10
            UNPKHU4			fenc_1_hi_3210, pix1_3_hi_32
            UNPKLU4         fenc_1_hi_3210, pix1_3_hi_10
            UNPKHU4			fenc_1_lo_3210, pix1_3_lo_32
            UNPKLU4         fenc_1_lo_3210, pix1_3_lo_10

            ; STEP 4: lower half of predict_8x8c_h
            PACK2           fdec_v4,    fdec_v4,    pix2_0
            PACK2           fdec_v5,    fdec_v5,    pix2_1
            PACK2           fdec_v6,    fdec_v6,    pix2_2
            PACK2           fdec_v7,    fdec_v7,    pix2_3
           ; 1st line of first-pass hadamard
            SUB2			pix1_0_lo_32, pix2_0,   diff_lo_32
            SUB2			pix1_0_lo_10, pix2_0,   diff_lo_10
            SUB2			pix1_0_hi_32, pix2_0,   diff_hi_32
            SUB2			pix1_0_hi_10, pix2_0,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_01_00:had_lo_03_02
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_01_00:had_hi_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_lo_32, pix2_1,   diff_lo_32
            SUB2			pix1_1_lo_10, pix2_1,   diff_lo_10
            SUB2			pix1_1_hi_32, pix2_1,   diff_hi_32
            SUB2			pix1_1_hi_10, pix2_1,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_11_10:had_lo_13_12
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_11_10:had_hi_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_lo_32, pix2_2,   diff_lo_32
            SUB2			pix1_2_lo_10, pix2_2,   diff_lo_10
            SUB2			pix1_2_hi_32, pix2_2,   diff_hi_32
            SUB2			pix1_2_hi_10, pix2_2,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_21_20:had_lo_23_22
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_21_20:had_hi_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_lo_32, pix2_3,   diff_lo_32
            SUB2			pix1_3_lo_10, pix2_3,   diff_lo_10
            SUB2			pix1_3_hi_32, pix2_3,   diff_hi_32
            SUB2			pix1_3_hi_10, pix2_3,   diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_31_30:had_lo_33_32
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_31_30:had_hi_33_32
            ; exchange rows to columns of temp low matrix
            DPACK2			had_lo_21_20, had_lo_01_00, had_lo_21_01:had_lo_20_00 ; 1st column of temp low matrix
            DPACK2			had_lo_31_30, had_lo_11_10, had_lo_31_11:had_lo_30_10 ; 2nd column of temp low matrix
            DPACK2			had_lo_23_22, had_lo_03_02, had_lo_23_03:had_lo_22_02 ; 3rd column of temp low matrix
            DPACK2			had_lo_33_32, had_lo_13_12, had_lo_33_13:had_lo_32_12 ; 4th column of temp low matrix
            DPACK2			had_hi_21_20, had_hi_01_00, had_hi_21_01:had_hi_20_00 ; 1st column of temp high matrix
            DPACK2			had_hi_31_30, had_hi_11_10, had_hi_31_11:had_hi_30_10 ; 2nd column of temp high matrix
            DPACK2			had_hi_23_22, had_hi_03_02, had_hi_23_03:had_hi_22_02 ; 3rd column of temp high matrix
            DPACK2			had_hi_33_32, had_hi_13_12, had_hi_33_13:had_hi_32_12 ; 4th column of temp high matrix
            ; 1st column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_20_00, had_lo_30_10, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_20_00, had_hi_30_10, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        satd_lo_1
            DOTP2			abs_hi_1,   k_1,        satd_hi_1
            DOTP2			abs_lo_2,   k_1,        satd_lo_2
            DOTP2			abs_hi_2,   k_1,        satd_hi_2
            ; 2nd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_21_01, had_lo_31_11, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_21_01, had_hi_31_11, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 3rd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_22_02, had_lo_32_12, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_22_02, had_hi_32_12, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 4th column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_23_03, had_lo_33_13, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_23_03, had_hi_33_13, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; satd = satd_lo_1 + satd_hi_1 + satd_lo_2 + satd_hi_2
            ADD             satd_lo_1,  satd_hi_1,  satd_1
            ADD             satd_lo_2,  satd_hi_2,  satd_2
            ADD				satd_h,     satd_1,     satd_h
            ADD				satd_h,     satd_2,     satd_h

            ; STEP 5: lower half of predict_8x8c_v
            UNPKHU4         fdec_h_hi,  pix2_hi_32
            UNPKLU4         fdec_h_hi,  pix2_hi_10
            UNPKHU4         fdec_h_lo,  pix2_lo_32
            UNPKLU4         fdec_h_lo,  pix2_lo_10
            MVK             1,          i
loop_intra_satd_x3_8x8c_lo: .trip 2,    2,          2
            ; 1st line of first-pass hadamard
            SUB2			pix1_0_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_0_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_0_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_0_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_01_00:had_lo_03_02
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_01_00:had_hi_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_1_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_1_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_1_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_11_10:had_lo_13_12
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_11_10:had_hi_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_2_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_2_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_2_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_21_20:had_lo_23_22
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_21_20:had_hi_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_lo_32, pix2_lo_32, diff_lo_32
            SUB2			pix1_3_lo_10, pix2_lo_10, diff_lo_10
            SUB2			pix1_3_hi_32, pix2_hi_32, diff_hi_32
            SUB2			pix1_3_hi_10, pix2_hi_10, diff_hi_10
            DPACK2			diff_lo_32, diff_lo_10, diff_lo_31:diff_lo_20
            DPACK2			diff_hi_32, diff_hi_10, diff_hi_31:diff_hi_20
            ADDSUB2			diff_lo_20, diff_lo_31, s23_s01_lo:d23_d01_lo
            ADDSUB2			diff_hi_20, diff_hi_31, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, had_lo_31_30:had_lo_33_32
            ADDSUB2			d01_s01_hi, d23_s23_hi, had_hi_31_30:had_hi_33_32
            ; exchange rows to columns of temp low matrix
            DPACK2			had_lo_21_20, had_lo_01_00, had_lo_21_01:had_lo_20_00 ; 1st column of temp low matrix
            DPACK2			had_lo_31_30, had_lo_11_10, had_lo_31_11:had_lo_30_10 ; 2nd column of temp low matrix
            DPACK2			had_lo_23_22, had_lo_03_02, had_lo_23_03:had_lo_22_02 ; 3rd column of temp low matrix
            DPACK2			had_lo_33_32, had_lo_13_12, had_lo_33_13:had_lo_32_12 ; 4th column of temp low matrix
            DPACK2			had_hi_21_20, had_hi_01_00, had_hi_21_01:had_hi_20_00 ; 1st column of temp high matrix
            DPACK2			had_hi_31_30, had_hi_11_10, had_hi_31_11:had_hi_30_10 ; 2nd column of temp high matrix
            DPACK2			had_hi_23_22, had_hi_03_02, had_hi_23_03:had_hi_22_02 ; 3rd column of temp high matrix
            DPACK2			had_hi_33_32, had_hi_13_12, had_hi_33_13:had_hi_32_12 ; 4th column of temp high matrix
            ; 1st column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_20_00, had_lo_30_10, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_20_00, had_hi_30_10, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        satd_lo_1
            DOTP2			abs_hi_1,   k_1,        satd_hi_1
            DOTP2			abs_lo_2,   k_1,        satd_lo_2
            DOTP2			abs_hi_2,   k_1,        satd_hi_2
            ; 2nd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_21_01, had_lo_31_11, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_21_01, had_hi_31_11, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 3rd column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_22_02, had_lo_32_12, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_22_02, had_hi_32_12, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; 4th column of final-pass hadamard and abs sum
            ADDSUB2			had_lo_23_03, had_lo_33_13, s23_s01_lo:d23_d01_lo
            ADDSUB2			had_hi_23_03, had_hi_33_13, s23_s01_hi:d23_d01_hi
            DPACK2			d23_d01_lo, s23_s01_lo, d23_s23_lo:d01_s01_lo
            DPACK2			d23_d01_hi, s23_s01_hi, d23_s23_hi:d01_s01_hi
            ADDSUB2			d01_s01_lo, d23_s23_lo, s23_s01_lo:d23_d01_lo
            ADDSUB2			d01_s01_hi, d23_s23_hi, s23_s01_hi:d23_d01_hi
            ABS2			s23_s01_lo, abs_lo_1
            ABS2			s23_s01_hi, abs_hi_1
            ABS2			d23_d01_lo, abs_lo_2
            ABS2			d23_d01_hi, abs_hi_2
            DOTP2			abs_lo_1,   k_1,        dotp_lo_1
            DOTP2			abs_hi_1,   k_1,        dotp_hi_1
            DOTP2			abs_lo_2,   k_1,        dotp_lo_2
            DOTP2			abs_hi_2,   k_1,        dotp_hi_2
            ADD				satd_lo_1,  dotp_lo_1,  satd_lo_1
            ADD				satd_hi_1,  dotp_hi_1,  satd_hi_1
            ADD				satd_lo_2,  dotp_lo_2,  satd_lo_2
            ADD				satd_hi_2,  dotp_hi_2,  satd_hi_2
            ; satd = satd_lo_1 + satd_hi_1 + satd_lo_2 + satd_hi_2
            ADD             satd_lo_1,  satd_hi_1,  satd_1
            ADD             satd_lo_2,  satd_hi_2,  satd_2

            ; prepare data for next loop
  [!i]      B               loop_intra_satd_x3_8x8c_lo_end
            ADD             satd_v,     satd_1,     satd_v
            ADD             satd_v,     satd_2,     satd_v
            ; STEP 6: lower half of predict_8x8c_dc
            PACK2           dc_3,       dc_3,       pix2_hi_32
            PACK2           dc_3,       dc_3,       pix2_hi_10
            PACK2           dc_2,       dc_2,       pix2_lo_32
            PACK2           dc_2,       dc_2,       pix2_lo_10
  [i]       BDEC            loop_intra_satd_x3_8x8c_lo, i
loop_intra_satd_x3_8x8c_lo_end:
            ADD             satd_d,     satd_1,     satd_d
            ADD             satd_d,     satd_2,     satd_d

            ; write back satd order by dc, h, v
            SHR				satd_d,     1,          satd_d
            SHR             satd_h,     1,          satd_h
            SHR             satd_v,     1,          satd_v
            STNDW           satd_h:satd_d, *res++
            STNW            satd_v,     *res++

            .return
            .endproc

;* ======================================================================== *;
;* x264_intra_satd_x3_16x16_ti -- intra_satd_x3 on 16x16 block              *;
;* NOTE: this function suppose FDEC_STRIDE = 32 and FENC_STRIDE = 16.       *;
;* We calculates satd by order: v, h, dc.                                   *;
;* ======================================================================== *;
		.sect ".text:_x264_intra_satd_x3_16x16_ti"
        .global _x264_intra_satd_x3_16x16_ti
_x264_intra_satd_x3_16x16_ti .cproc fenc, fdec, res
            .no_mdep

            .ref            _x264_pixel_satd_16x16_ti
            .reg            pix_7654:pix_3210
            .reg            pix_FEDC:pix_BA98
            .reg            pix_0_7654:pix_0_3210
            .reg            pix_1_7654:pix_1_3210
            .reg            pix_2_7654:pix_2_3210
            .reg            pix_3_7654:pix_3_3210
            .reg            v_0, v_1, v_2, v_3
            .reg            dc, dc_0, dc_1, dc_2, dc_3
            .reg			fdec_lf, fdec_1x, fenc_1x, k_1, pix, pup, satd, i

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                 ; k_1 = 0x01010101
            MVK             16,         fenc_1x             ; fenc_1x = 16 (FENC_STRIDE / 1)
            MVK             32,         fdec_1x             ; fdec_1x = 32 (FDEC_STRIDE / 1)
            SUB             fdec,       1,          fdec_lf ; fdec_lf = fdec - 1
            MV              fdec,       pix                 ; pix = fdec
            ADD             fdec,       8,          pup     ; pup = fdec + 8
            MVK             7,          i                   ; i   = 7

            ; predict_16x16_v
            LDNDW           *-fdec[4], pix_7654:pix_3210
            LDNDW           *-fdec[3], pix_FEDC:pix_BA98
            DOTPU4          pix_3210,   k_1,        dc_0 ; h[3] + h[2] + h[1] + h[0]
            DOTPU4          pix_7654,   k_1,        dc_1 ; h[7] + h[6] + h[5] + h[4]
            DOTPU4          pix_BA98,   k_1,        dc_2 ; h[B] + h[A] + h[9] + h[8]
            DOTPU4          pix_FEDC,   k_1,        dc_3 ; h[F] + h[E] + h[D] + h[C]
loop_intra_satd_x3_16x16_v: .trip 8,    8,          8
            STNDW           pix_7654:pix_3210, *pix++[4] ; store lower 8 bytes of line 1
            STNDW           pix_FEDC:pix_BA98, *pup++[4] ; store upper 8 bytes of line 1
            STNDW           pix_7654:pix_3210, *pix++[4] ; store lower 8 bytes of line 2
            STNDW           pix_FEDC:pix_BA98, *pup++[4] ; store upper 8 bytes of line 2
   [i]      BDEC            loop_intra_satd_x3_16x16_v,  i
            .call           satd = _x264_pixel_satd_16x16_ti(fdec, fdec_1x, fenc, fenc_1x)
            STNW            satd,       *res++

            ; predict_16x16_h
            MV              fdec,       pix              ; pix = fdec
            ADD             fdec,       8,          pup  ; pup = fdec + 8
            MVK             3,          i                ; i   = 3
loop_intra_satd_x3_16x16_h: .trip 4,    4,          4
            LDBU            *fdec_lf++[fdec_1x], v_0
            LDBU            *fdec_lf++[fdec_1x], v_1
            LDBU            *fdec_lf++[fdec_1x], v_2
            LDBU            *fdec_lf++[fdec_1x], v_3
            ADD             dc_0,       v_0,        dc_0
            ADD             dc_1,       v_1,        dc_1
            ADD             dc_2,       v_2,        dc_2
            ADD             dc_3,       v_3,        dc_3
            PACK2           v_0,        v_0,        v_0
            PACK2           v_1,        v_1,        v_1
            PACK2           v_2,        v_2,        v_2
            PACK2           v_3,        v_3,        v_3
            PACKL4          v_0,        v_0,        pix_0_3210
            PACKL4          v_1,        v_1,        pix_1_3210
            PACKL4          v_2,        v_2,        pix_2_3210
            PACKL4          v_3,        v_3,        pix_3_3210
            MV              pix_0_3210, pix_0_7654
            MV              pix_1_3210, pix_1_7654
            MV              pix_2_3210, pix_2_7654
            MV              pix_3_3210, pix_3_7654
            STNDW           pix_0_7654:pix_0_3210, *pix++[4] ; store lower 8 bytes of line 1
            STNDW           pix_0_7654:pix_0_3210, *pup++[4] ; store upper 8 bytes of line 1
            STNDW           pix_1_7654:pix_1_3210, *pix++[4] ; store lower 8 bytes of line 2
            STNDW           pix_1_7654:pix_1_3210, *pup++[4] ; store upper 8 bytes of line 2
            STNDW           pix_2_7654:pix_2_3210, *pix++[4] ; store lower 8 bytes of line 3
            STNDW           pix_2_7654:pix_2_3210, *pup++[4] ; store upper 8 bytes of line 3
            STNDW           pix_3_7654:pix_3_3210, *pix++[4] ; store lower 8 bytes of line 4
            STNDW           pix_3_7654:pix_3_3210, *pup++[4] ; store upper 8 bytes of line 4
   [i]      BDEC            loop_intra_satd_x3_16x16_h,  i
            .call           satd = _x264_pixel_satd_16x16_ti(fdec, fdec_1x, fenc, fenc_1x)
            STNW            satd,       *res++

            ; predict_16x16_dc
            ADD             dc_0,       dc_1,       dc
            ADD             dc,         dc_2,       dc
            ADD             dc,         dc_3,       dc
            ADD             dc,         16,         dc
            SHR             dc,         5,          dc   ; ( dc + 16 ) >> 5
            PACK2           dc,         dc,         dc
            SPACKU4         dc,         dc,         pix_3210
            SPACKU4         dc,         dc,         pix_7654
            MV              fdec,       pix              ; pix = fdec
            ADD             fdec,       8,          pup  ; pup = fdec + 8
            MVK             7,          i                ; i   = 7
loop_intra_satd_x3_16x16_dc: .trip 8,   8,          8
            STNDW           pix_7654:pix_3210, *pix++[4] ; store lower 8 bytes of line 1
            STNDW           pix_7654:pix_3210, *pup++[4] ; store upper 8 bytes of line 1
            STNDW           pix_7654:pix_3210, *pix++[4] ; store lower 8 bytes of line 2
            STNDW           pix_7654:pix_3210, *pup++[4] ; store upper 8 bytes of line 2
   [i]      BDEC            loop_intra_satd_x3_16x16_dc,  i
            .call           satd = _x264_pixel_satd_16x16_ti(fdec, fdec_1x, fenc, fenc_1x)
            STNW            satd,       *res++

            .return
            .endproc

;* ======================================================================== *;
;* x264_intra_satd_x4_4x4_h_ti -- intra_satd_x4 on 4x4 block(ddl/ddr/hd/hu) *;
;* NOTE: this function suppose FDEC_STRIDE = 32 and FENC_STRIDE = 16.       *;
;* ======================================================================== *;
		.sect ".text:_x264_intra_satd_x4_4x4_h_ti"
        .global _x264_intra_satd_x4_4x4_h_ti
_x264_intra_satd_x4_4x4_h_ti .cproc fenc, fdec, res
            .no_mdep

            .reg            r_HGFE:r_DCBA, r_M, r_I, r_J, r_K, r_L
            .reg            r_HG, r_GF, r_FE, r_ED, r_DC, r_CB, r_BA
            .reg            r_AM, r_MI, r_IJ, r_JK, r_KL, r_LL
            .reg            pix_01, pix_23, pix_45, pix_67, pix_89
            .reg            pix_02, pix_13, pix_46, pix_56, pix_X6
            .reg            pix_26:pix_37, pix_48:pix_59
            .reg            pix_10:pix_32, pix_54:pix_66
            .reg			pix0_0_3210, pix0_1_3210, pix0_2_3210, pix0_3_3210
            .reg			pix1_0_3210, pix1_1_3210, pix1_2_3210, pix1_3_3210
            .reg			pix2_0_3210, pix2_1_3210, pix2_2_3210, pix2_3_3210
            .reg            pix0_0_32, pix0_0_10, pix0_1_32, pix0_1_10
            .reg            pix0_2_32, pix0_2_10, pix0_3_32, pix0_3_10
            .reg            pix1_0_32, pix1_0_10, pix1_1_32, pix1_1_10
            .reg            pix1_2_32, pix1_2_10, pix1_3_32, pix1_3_10
            .reg            pix2_0_32, pix2_0_10, pix2_1_32, pix2_1_10
            .reg            pix2_2_32, pix2_2_10, pix2_3_32, pix2_3_10
            .reg			dif1_32, dif1_10, dif1_31:dif1_20
            .reg			dif2_32, dif2_10, dif2_31:dif2_20
            .reg			had1_01_00:had1_03_02
            .reg			had1_11_10:had1_13_12
            .reg			had1_21_20:had1_23_22
            .reg			had1_31_30:had1_33_32
            .reg			had1_21_01:had1_20_00
            .reg			had1_31_11:had1_30_10
            .reg			had1_23_03:had1_22_02
            .reg			had1_33_13:had1_32_12
            .reg			had2_01_00:had2_03_02
            .reg			had2_11_10:had2_13_12
            .reg			had2_21_20:had2_23_22
            .reg			had2_31_30:had2_33_32
            .reg			had2_21_01:had2_20_00
            .reg			had2_31_11:had2_30_10
            .reg			had2_23_03:had2_22_02
            .reg			had2_33_13:had2_32_12
            .reg			s23_s01_1:d23_d01_1, d23_s23_1:d01_s01_1
            .reg			s23_s01_2:d23_d01_2, d23_s23_2:d01_s01_2
            .reg			abs1_1, abs1_2, abs2_1, abs2_2
            .reg			dotp1_1, dotp1_2, dotp2_1, dotp2_2
            .reg			satd_1, satd_2
            .reg			fdec_lf, fdec_1x, k_1, k_3_1, k_2_2, k_1_2_1

            MVKL            0x00030001, k_3_1
            MVKH            0x00030001, k_3_1
            MVKL            0x00020002, k_2_2
            MVKH            0x00020002, k_2_2
            MVKL            0x01020100, k_1_2_1
            MVKH            0x01020100, k_1_2_1
            MVKL            0x00010001, k_1
            MVKH            0x00010001, k_1                 ; k_1     = 0x00010001
            MVK             32,         fdec_1x             ; fdec_1x = 32 (FDEC_STRIDE / 1)
            SUB             fdec,       1,          fdec_lf ; fdec_lf = fdec - 1

            ; load all pixels of fenc
            LDNW            *fenc++[4], pix0_0_3210
            LDNW            *fenc++[4], pix0_1_3210
            LDNW            *fenc++[4], pix0_2_3210
            LDNW            *fenc++[4], pix0_3_3210
            UNPKHU4			pix0_0_3210, pix0_0_32
            UNPKLU4			pix0_0_3210, pix0_0_10
            UNPKHU4			pix0_1_3210, pix0_1_32
            UNPKLU4			pix0_1_3210, pix0_1_10
            UNPKHU4			pix0_2_3210, pix0_2_32
            UNPKLU4			pix0_2_3210, pix0_2_10
            UNPKHU4			pix0_3_3210, pix0_3_32
            UNPKLU4			pix0_3_3210, pix0_3_10

            ; load horizontal and vertical pixels
            ;*  M  A  B  C  D  E  F  G  H *;
            ;*  I  a  b  c  d             *;
            ;*  J  e  f  g  h             *;
            ;*  K  i  j  k  l             *;
            ;*  L  m  n  o  p             *;
            LDNDW           *-fdec[4],   r_HGFE:r_DCBA
            LDBU            *-fdec_lf[fdec_1x],  r_M
            LDBU            *fdec_lf++[fdec_1x], r_I
            LDBU            *fdec_lf++[fdec_1x], r_J
            LDBU            *fdec_lf++[fdec_1x], r_K
            LDBU            *fdec_lf++[fdec_1x], r_L
            UNPKLU4         r_DCBA,     r_BA
            UNPKHU4         r_DCBA,     r_DC
            UNPKLU4         r_HGFE,     r_FE
            UNPKHU4         r_HGFE,     r_HG
            PACK2           r_M,        r_I,        r_MI
            PACK2           r_I,        r_J,        r_IJ
            PACK2           r_J,        r_K,        r_JK
            PACK2           r_K,        r_L,        r_KL
            PACK2           r_L,        r_L,        r_LL
            PACKLH2         r_BA,       r_MI,       r_AM
            PACKLH2         r_DC,       r_BA,       r_CB
            PACkLH2         r_FE,       r_DC,       r_ED
            PACKLH2         r_HG,       r_FE,       r_GF

            ;* predict_4x4_ddl *;
            ;*  M  A  B  C  D  *;
            ;*  I  0  1  2  3  *;
            ;*  J  1  2  3  4  *;
            ;*  K  2  3  4  5  *;
            ;*  L  3  4  5  6  *;
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_BA,       r_CB,       pix_10
            ADD2            r_DC,       r_ED,       pix_32
            ADD2            r_FE,       r_GF,       pix_54
            ADD2            pix_10,     r_CB,       pix_10
            ADD2            pix_32,     r_ED,       pix_32
            ADD2            pix_54,     r_GF,       pix_54
            ADD2            pix_10,     r_DC,       pix_10
            ADD2            pix_32,     r_FE,       pix_32
            ADD2            pix_54,     r_HG,       pix_54
            DOTP2           r_HG,       k_3_1,      pix_X6 ; (G + 3*H)
            ADD2            pix_10,     k_2_2,      pix_10
            ADD2            pix_32,     k_2_2,      pix_32
            ADD2            pix_54,     k_2_2,      pix_54
            ADD2            pix_X6,     k_2_2,      pix_X6
            SHR2            pix_10,     2,          pix_10
            SHR2            pix_32,     2,          pix_32
            SHR2            pix_54,     2,          pix_54
            SHR2            pix_X6,     2,          pix_X6
            SPACKU4         pix_32,     pix_10,     pix1_0_3210
            SPACKU4         pix_54,     pix_32,     pix1_2_3210
            SHRMB           pix_54,     pix1_0_3210, pix1_1_3210
            SHRMB           pix_X6,     pix1_2_3210, pix1_3_3210
            UNPKHU4			pix1_0_3210, pix1_0_32
            UNPKLU4			pix1_0_3210, pix1_0_10
            UNPKHU4			pix1_1_3210, pix1_1_32
            UNPKLU4			pix1_1_3210, pix1_1_10
            UNPKHU4			pix1_2_3210, pix1_2_32
            UNPKLU4			pix1_2_3210, pix1_2_10
            UNPKHU4			pix1_3_3210, pix1_3_32
            UNPKLU4			pix1_3_3210, pix1_3_10

            ;* predict_4x4_ddr *;
            ;*  M  A  B  C  D  *;
            ;*  I  3  4  5  6  *;
            ;*  J  2  3  4  5  *;
            ;*  K  1  2  3  4  *;
            ;*  L  0  1  2  3  *;
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_IJ,       r_JK,       pix_10
            ADD2            r_AM,       r_MI,       pix_32
            ADD2            r_CB,       r_BA,       pix_54
            ADD2            pix_10,     r_JK,       pix_10
            ADD2            pix_32,     r_MI,       pix_32
            ADD2            pix_54,     r_BA,       pix_54
            ADD2            pix_10,     r_KL,       pix_10
            ADD2            pix_32,     r_IJ,       pix_32
            ADD2            pix_54,     r_AM,       pix_54
            DOTPU4          r_DCBA,     k_1_2_1,    pix_X6 ; (D + 2*C + B)
            ADD2            pix_10,     k_2_2,      pix_10
            ADD2            pix_32,     k_2_2,      pix_32
            ADD2            pix_54,     k_2_2,      pix_54
            ADD2            pix_X6,     k_2_2,      pix_X6
            SHR2            pix_10,     2,          pix_10
            SHR2            pix_32,     2,          pix_32
            SHR2            pix_54,     2,          pix_54
            SHR2            pix_X6,     2,          pix_X6
            SPACKU4         pix_32,     pix_10,     pix2_3_3210
            SPACKU4         pix_54,     pix_32,     pix2_1_3210
            SHRMB           pix_54,     pix2_3_3210, pix2_2_3210
            SHRMB           pix_X6,     pix2_1_3210, pix2_0_3210
            UNPKHU4			pix2_0_3210, pix2_0_32
            UNPKLU4			pix2_0_3210, pix2_0_10
            UNPKHU4			pix2_1_3210, pix2_1_32
            UNPKLU4			pix2_1_3210, pix2_1_10
            UNPKHU4			pix2_2_3210, pix2_2_32
            UNPKLU4			pix2_2_3210, pix2_2_10
            UNPKHU4			pix2_3_3210, pix2_3_32
            UNPKLU4			pix2_3_3210, pix2_3_10

            ; 1st line of first-pass hadamard
            SUB2			pix1_0_32,  pix0_0_32,  dif1_32
            SUB2			pix1_0_10,  pix0_0_10,  dif1_10
            SUB2			pix2_0_32,  pix0_0_32,  dif2_32
            SUB2			pix2_0_10,  pix0_0_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_01_00:had1_03_02
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_01_00:had2_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_32,  pix0_1_32,  dif1_32
            SUB2			pix1_1_10,  pix0_1_10,  dif1_10
            SUB2			pix2_1_32,  pix0_1_32,  dif2_32
            SUB2			pix2_1_10,  pix0_1_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_11_10:had1_13_12
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_11_10:had2_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_32,  pix0_2_32,  dif1_32
            SUB2			pix1_2_10,  pix0_2_10,  dif1_10
            SUB2			pix2_2_32,  pix0_2_32,  dif2_32
            SUB2			pix2_2_10,  pix0_2_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_21_20:had1_23_22
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_21_20:had2_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_32,  pix0_3_32,  dif1_32
            SUB2			pix1_3_10,  pix0_3_10,  dif1_10
            SUB2			pix2_3_32,  pix0_3_32,  dif2_32
            SUB2			pix2_3_10,  pix0_3_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_31_30:had1_33_32
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_31_30:had2_33_32
            ; exchange rows to columns of temp matrix
            DPACK2			had1_21_20, had1_01_00, had1_21_01:had1_20_00
            DPACK2			had1_31_30, had1_11_10, had1_31_11:had1_30_10
            DPACK2			had1_23_22, had1_03_02, had1_23_03:had1_22_02
            DPACK2			had1_33_32, had1_13_12, had1_33_13:had1_32_12
            DPACK2			had2_21_20, had2_01_00, had2_21_01:had2_20_00
            DPACK2			had2_31_30, had2_11_10, had2_31_11:had2_30_10
            DPACK2			had2_23_22, had2_03_02, had2_23_03:had2_22_02
            DPACK2			had2_33_32, had2_13_12, had2_33_13:had2_32_12
            ; 1st column of final-pass hadamard
            ADDSUB2			had1_20_00, had1_30_10, s23_s01_1:d23_d01_1
            ADDSUB2			had2_20_00, had2_30_10, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             dotp1_1,    dotp1_2,    satd_1
            ADD             dotp2_1,    dotp2_2,    satd_2
            ; 2nd column of final-pass hadamard
            ADDSUB2			had1_21_01, had1_31_11, s23_s01_1:d23_d01_1
            ADDSUB2			had2_21_01, had2_31_11, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 3rd column of final-pass hadamard
            ADDSUB2			had1_22_02, had1_32_12, s23_s01_1:d23_d01_1
            ADDSUB2			had2_22_02, had2_32_12, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 4th column of final-pass hadamard
            ADDSUB2			had1_23_03, had1_33_13, s23_s01_1:d23_d01_1
            ADDSUB2			had2_23_03, had2_33_13, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2

            ; store satd in order: ddl, ddr
            SHR				satd_1,     1,          satd_1 ; satd_ddl
            SHR				satd_2,     1,          satd_2 ; satd_ddr
            STNW            satd_1,     *+res[3] ; I_PRED_4x4_DDL= 3
            STNW            satd_2,     *+res[4] ; I_PRED_4x4_DDR= 4

            ;* predict_4x4_hd  *;
            ;*  M  A  B  C  D  *;
            ;*  I  6  2  1  0  *;
            ;*  J  7  3  6  2  *;
            ;*  K  8  4  7  3  *;
            ;*  L  9  5  8  4  *;
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_CB,       r_BA,       pix_01
            ADD2            r_AM,       r_MI,       pix_23
            ADD2            r_IJ,       r_JK,       pix_45
            ADD2            pix_01,     r_BA,       pix_01
            ADD2            pix_23,     r_MI,       pix_23
            ADD2            pix_45,     r_JK,       pix_45
            ADD2            pix_01,     r_AM,       pix_01
            ADD2            pix_23,     r_IJ,       pix_23
            ADD2            pix_45,     r_KL,       pix_45
            ADD2            pix_01,     k_2_2,      pix_01
            ADD2            pix_23,     k_2_2,      pix_23
            ADD2            pix_45,     k_2_2,      pix_45
            SHR2            pix_01,     2,          pix_01
            SHR2            pix_23,     2,          pix_23
            SHR2            pix_45,     2,          pix_45
            ; (x1 + x2 + 1) >> 1
            AVG2            r_MI,       r_IJ,       pix_67
            AVG2            r_JK,       r_KL,       pix_89
            DPACK2          pix_23,     pix_67,     pix_26:pix_37
            DPACK2          pix_45,     pix_89,     pix_48:pix_59
            SPACKU4         pix_01,     pix_26,     pix1_0_3210
            SPACKU4         pix_26,     pix_37,     pix1_1_3210
            SPACKU4         pix_37,     pix_48,     pix1_2_3210
            SPACKU4         pix_48,     pix_59,     pix1_3_3210
            UNPKHU4			pix1_0_3210, pix1_0_32
            UNPKLU4			pix1_0_3210, pix1_0_10
            UNPKHU4			pix1_1_3210, pix1_1_32
            UNPKLU4			pix1_1_3210, pix1_1_10
            UNPKHU4			pix1_2_3210, pix1_2_32
            UNPKLU4			pix1_2_3210, pix1_2_10
            UNPKHU4			pix1_3_3210, pix1_3_32
            UNPKLU4			pix1_3_3210, pix1_3_10

            ;* predict_4x4_hu  *;
            ;*  M  A  B  C  D  *;
            ;*  I  0  1  2  3  *;
            ;*  J  2  3  4  5  *;
            ;*  K  4  5  6  6  *;
            ;*  L  6  6  6  6  *;
            ; (x1 + x2 + 1) >> 1
            AVG2            r_IJ,       r_JK,       pix_02
            AVG2            r_KL,       r_LL,       pix_46
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_IJ,       r_JK,       pix_13
            ADD2            r_KL,       r_LL,       pix_56
            ADD2            pix_13,     r_JK,       pix_13
            ADD2            pix_56,     r_LL,       pix_56
            ADD2            pix_13,     r_KL,       pix_13
            ADD2            pix_56,     r_LL,       pix_56
            ADD2            pix_13,     k_2_2,      pix_13
            ADD2            pix_56,     k_2_2,      pix_56
            SHR2            pix_13,     2,          pix_13
            SHR2            pix_56,     2,          pix_56
            DPACK2          pix_13,     pix_02,     pix_10:pix_32
            DPACK2          pix_56,     pix_46,     pix_54:pix_66
            PACKL4          pix_32,     pix_10,     pix2_0_3210
            PACKL4          pix_54,     pix_32,     pix2_1_3210
            PACKL4          pix_66,     pix_54,     pix2_2_3210
            PACKL4          pix_66,     pix_66,     pix2_3_3210
            UNPKHU4			pix2_0_3210, pix2_0_32
            UNPKLU4			pix2_0_3210, pix2_0_10
            UNPKHU4			pix2_1_3210, pix2_1_32
            UNPKLU4			pix2_1_3210, pix2_1_10
            UNPKHU4			pix2_2_3210, pix2_2_32
            UNPKLU4			pix2_2_3210, pix2_2_10
            UNPKHU4			pix2_3_3210, pix2_3_32
            UNPKLU4			pix2_3_3210, pix2_3_10

            ; 1st line of first-pass hadamard
            SUB2			pix1_0_32,  pix0_0_32,  dif1_32
            SUB2			pix1_0_10,  pix0_0_10,  dif1_10
            SUB2			pix2_0_32,  pix0_0_32,  dif2_32
            SUB2			pix2_0_10,  pix0_0_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_01_00:had1_03_02
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_01_00:had2_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_32,  pix0_1_32,  dif1_32
            SUB2			pix1_1_10,  pix0_1_10,  dif1_10
            SUB2			pix2_1_32,  pix0_1_32,  dif2_32
            SUB2			pix2_1_10,  pix0_1_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_11_10:had1_13_12
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_11_10:had2_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_32,  pix0_2_32,  dif1_32
            SUB2			pix1_2_10,  pix0_2_10,  dif1_10
            SUB2			pix2_2_32,  pix0_2_32,  dif2_32
            SUB2			pix2_2_10,  pix0_2_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_21_20:had1_23_22
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_21_20:had2_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_32,  pix0_3_32,  dif1_32
            SUB2			pix1_3_10,  pix0_3_10,  dif1_10
            SUB2			pix2_3_32,  pix0_3_32,  dif2_32
            SUB2			pix2_3_10,  pix0_3_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_31_30:had1_33_32
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_31_30:had2_33_32
            ; exchange rows to columns of temp matrix
            DPACK2			had1_21_20, had1_01_00, had1_21_01:had1_20_00
            DPACK2			had1_31_30, had1_11_10, had1_31_11:had1_30_10
            DPACK2			had1_23_22, had1_03_02, had1_23_03:had1_22_02
            DPACK2			had1_33_32, had1_13_12, had1_33_13:had1_32_12
            DPACK2			had2_21_20, had2_01_00, had2_21_01:had2_20_00
            DPACK2			had2_31_30, had2_11_10, had2_31_11:had2_30_10
            DPACK2			had2_23_22, had2_03_02, had2_23_03:had2_22_02
            DPACK2			had2_33_32, had2_13_12, had2_33_13:had2_32_12
            ; 1st column of final-pass hadamard
            ADDSUB2			had1_20_00, had1_30_10, s23_s01_1:d23_d01_1
            ADDSUB2			had2_20_00, had2_30_10, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             dotp1_1,    dotp1_2,    satd_1
            ADD             dotp2_1,    dotp2_2,    satd_2
            ; 2nd column of final-pass hadamard
            ADDSUB2			had1_21_01, had1_31_11, s23_s01_1:d23_d01_1
            ADDSUB2			had2_21_01, had2_31_11, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 3rd column of final-pass hadamard
            ADDSUB2			had1_22_02, had1_32_12, s23_s01_1:d23_d01_1
            ADDSUB2			had2_22_02, had2_32_12, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 4th column of final-pass hadamard
            ADDSUB2			had1_23_03, had1_33_13, s23_s01_1:d23_d01_1
            ADDSUB2			had2_23_03, had2_33_13, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2

            ; store satd in order: hd, hu
            SHR				satd_1,     1,          satd_1 ; satd_hd
            SHR				satd_2,     1,          satd_2 ; satd_hu
            STNW            satd_1,     *+res[6] ; I_PRED_4x4_HD = 6
            STNW            satd_2,     *+res[8] ; I_PRED_4x4_HU = 8

            .return
            .endproc

;* ======================================================================== *;
;* x264_intra_satd_x4_4x4_v_ti -- intra_satd_x4 on 4x4 block(ddl/ddr/vr/vl) *;
;* NOTE: this function suppose FDEC_STRIDE = 32 and FENC_STRIDE = 16.       *;
;* ======================================================================== *;
		.sect ".text:_x264_intra_satd_x4_4x4_v_ti"
        .global _x264_intra_satd_x4_4x4_v_ti
_x264_intra_satd_x4_4x4_v_ti .cproc fenc, fdec, res
            .no_mdep

            .reg            r_HGFE:r_DCBA, r_M, r_I, r_J, r_K, r_L
            .reg            r_EDCB, r_FEDC, r_CBAM
            .reg            r_HG, r_GF, r_FE, r_ED, r_DC, r_CB, r_BA
            .reg            r_AM, r_MI, r_IJ, r_JK, r_KL
            .reg            pix_X6, pix_54, pix_45, pix_X4, pix_32, pix_10
            .reg			pix0_0_3210, pix0_1_3210, pix0_2_3210, pix0_3_3210
            .reg			pix1_0_3210, pix1_1_3210, pix1_2_3210, pix1_3_3210
            .reg			pix2_0_3210, pix2_1_3210, pix2_2_3210, pix2_3_3210
            .reg            pix0_0_32, pix0_0_10, pix0_1_32, pix0_1_10
            .reg            pix0_2_32, pix0_2_10, pix0_3_32, pix0_3_10
            .reg            pix1_0_32, pix1_0_10, pix1_1_32, pix1_1_10
            .reg            pix1_2_32, pix1_2_10, pix1_3_32, pix1_3_10
            .reg            pix2_0_32, pix2_0_10, pix2_1_32, pix2_1_10
            .reg            pix2_2_32, pix2_2_10, pix2_3_32, pix2_3_10
            .reg			dif1_32, dif1_10, dif1_31:dif1_20
            .reg			dif2_32, dif2_10, dif2_31:dif2_20
            .reg			had1_01_00:had1_03_02
            .reg			had1_11_10:had1_13_12
            .reg			had1_21_20:had1_23_22
            .reg			had1_31_30:had1_33_32
            .reg			had1_21_01:had1_20_00
            .reg			had1_31_11:had1_30_10
            .reg			had1_23_03:had1_22_02
            .reg			had1_33_13:had1_32_12
            .reg			had2_01_00:had2_03_02
            .reg			had2_11_10:had2_13_12
            .reg			had2_21_20:had2_23_22
            .reg			had2_31_30:had2_33_32
            .reg			had2_21_01:had2_20_00
            .reg			had2_31_11:had2_30_10
            .reg			had2_23_03:had2_22_02
            .reg			had2_33_13:had2_32_12
            .reg			s23_s01_1:d23_d01_1, d23_s23_1:d01_s01_1
            .reg			s23_s01_2:d23_d01_2, d23_s23_2:d01_s01_2
            .reg			abs1_1, abs1_2, abs2_1, abs2_2
            .reg			dotp1_1, dotp1_2, dotp2_1, dotp2_2
            .reg			satd_1, satd_2
            .reg			fdec_lf, fdec_1x, k_1, k_3_1, k_2_2, k_1_2_1

            MVKL            0x00030001, k_3_1
            MVKH            0x00030001, k_3_1
            MVKL            0x00020002, k_2_2
            MVKH            0x00020002, k_2_2
            MVKL            0x01020100, k_1_2_1
            MVKH            0x01020100, k_1_2_1
            MVKL            0x00010001, k_1
            MVKH            0x00010001, k_1                 ; k_1     = 0x00010001
            MVK             32,         fdec_1x             ; fdec_1x = 32 (FDEC_STRIDE / 1)
            SUB             fdec,       1,          fdec_lf ; fdec_lf = fdec - 1

            ; load all pixels of fenc
            LDNW            *fenc++[4], pix0_0_3210
            LDNW            *fenc++[4], pix0_1_3210
            LDNW            *fenc++[4], pix0_2_3210
            LDNW            *fenc++[4], pix0_3_3210
            UNPKHU4			pix0_0_3210, pix0_0_32
            UNPKLU4			pix0_0_3210, pix0_0_10
            UNPKHU4			pix0_1_3210, pix0_1_32
            UNPKLU4			pix0_1_3210, pix0_1_10
            UNPKHU4			pix0_2_3210, pix0_2_32
            UNPKLU4			pix0_2_3210, pix0_2_10
            UNPKHU4			pix0_3_3210, pix0_3_32
            UNPKLU4			pix0_3_3210, pix0_3_10

            ; load horizontal and vertical pixels
            ;*  M  A  B  C  D  E  F  G  H *;
            ;*  I  a  b  c  d             *;
            ;*  J  e  f  g  h             *;
            ;*  K  i  j  k  l             *;
            ;*  L  m  n  o  p             *;
            LDNDW           *-fdec[4],   r_HGFE:r_DCBA
            LDBU            *-fdec_lf[fdec_1x],  r_M
            LDBU            *fdec_lf++[fdec_1x], r_I
            LDBU            *fdec_lf++[fdec_1x], r_J
            LDBU            *fdec_lf++[fdec_1x], r_K
            LDBU            *fdec_lf++[fdec_1x], r_L
            UNPKLU4         r_DCBA,     r_BA
            UNPKHU4         r_DCBA,     r_DC
            UNPKLU4         r_HGFE,     r_FE
            UNPKHU4         r_HGFE,     r_HG
            PACK2           r_M,        r_I,        r_MI
            PACK2           r_I,        r_J,        r_IJ
            PACK2           r_J,        r_K,        r_JK
            PACK2           r_K,        r_L,        r_KL
            PACKLH2         r_BA,       r_MI,       r_AM
            PACKLH2         r_DC,       r_BA,       r_CB
            PACkLH2         r_FE,       r_DC,       r_ED
            PACKLH2         r_HG,       r_FE,       r_GF

            ;* predict_4x4_ddl *;
            ;*  M  A  B  C  D  *;
            ;*  I  0  1  2  3  *;
            ;*  J  1  2  3  4  *;
            ;*  K  2  3  4  5  *;
            ;*  L  3  4  5  6  *;
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_BA,       r_CB,       pix_10
            ADD2            r_DC,       r_ED,       pix_32
            ADD2            r_FE,       r_GF,       pix_54
            ADD2            pix_10,     r_CB,       pix_10
            ADD2            pix_32,     r_ED,       pix_32
            ADD2            pix_54,     r_GF,       pix_54
            ADD2            pix_10,     r_DC,       pix_10
            ADD2            pix_32,     r_FE,       pix_32
            ADD2            pix_54,     r_HG,       pix_54
            DOTP2           r_HG,       k_3_1,      pix_X6 ; (G + 3*H)
            ADD2            pix_10,     k_2_2,      pix_10
            ADD2            pix_32,     k_2_2,      pix_32
            ADD2            pix_54,     k_2_2,      pix_54
            ADD2            pix_X6,     k_2_2,      pix_X6
            SHR2            pix_10,     2,          pix_10
            SHR2            pix_32,     2,          pix_32
            SHR2            pix_54,     2,          pix_54
            SHR2            pix_X6,     2,          pix_X6
            SPACKU4         pix_32,     pix_10,     pix1_0_3210
            SPACKU4         pix_54,     pix_32,     pix1_2_3210
            SHRMB           pix_54,     pix1_0_3210, pix1_1_3210
            SHRMB           pix_X6,     pix1_2_3210, pix1_3_3210
            UNPKHU4			pix1_0_3210, pix1_0_32
            UNPKLU4			pix1_0_3210, pix1_0_10
            UNPKHU4			pix1_1_3210, pix1_1_32
            UNPKLU4			pix1_1_3210, pix1_1_10
            UNPKHU4			pix1_2_3210, pix1_2_32
            UNPKLU4			pix1_2_3210, pix1_2_10
            UNPKHU4			pix1_3_3210, pix1_3_32
            UNPKLU4			pix1_3_3210, pix1_3_10

            ;* predict_4x4_ddr *;
            ;*  M  A  B  C  D  *;
            ;*  I  3  4  5  6  *;
            ;*  J  2  3  4  5  *;
            ;*  K  1  2  3  4  *;
            ;*  L  0  1  2  3  *;
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_IJ,       r_JK,       pix_10
            ADD2            r_AM,       r_MI,       pix_32
            ADD2            r_CB,       r_BA,       pix_54
            ADD2            pix_10,     r_JK,       pix_10
            ADD2            pix_32,     r_MI,       pix_32
            ADD2            pix_54,     r_BA,       pix_54
            ADD2            pix_10,     r_KL,       pix_10
            ADD2            pix_32,     r_IJ,       pix_32
            ADD2            pix_54,     r_AM,       pix_54
            DOTPU4          r_DCBA,     k_1_2_1,    pix_X6 ; (D + 2*C + B)
            ADD2            pix_10,     k_2_2,      pix_10
            ADD2            pix_32,     k_2_2,      pix_32
            ADD2            pix_54,     k_2_2,      pix_54
            ADD2            pix_X6,     k_2_2,      pix_X6
            SHR2            pix_10,     2,          pix_10
            SHR2            pix_32,     2,          pix_32
            SHR2            pix_54,     2,          pix_54
            SHR2            pix_X6,     2,          pix_X6
            SPACKU4         pix_32,     pix_10,     pix2_3_3210
            SPACKU4         pix_54,     pix_32,     pix2_1_3210
            SHRMB           pix_54,     pix2_3_3210, pix2_2_3210
            SHRMB           pix_X6,     pix2_1_3210, pix2_0_3210
            UNPKHU4			pix2_0_3210, pix2_0_32
            UNPKLU4			pix2_0_3210, pix2_0_10
            UNPKHU4			pix2_1_3210, pix2_1_32
            UNPKLU4			pix2_1_3210, pix2_1_10
            UNPKHU4			pix2_2_3210, pix2_2_32
            UNPKLU4			pix2_2_3210, pix2_2_10
            UNPKHU4			pix2_3_3210, pix2_3_32
            UNPKLU4			pix2_3_3210, pix2_3_10

            ; 1st line of first-pass hadamard
            SUB2			pix1_0_32,  pix0_0_32,  dif1_32
            SUB2			pix1_0_10,  pix0_0_10,  dif1_10
            SUB2			pix2_0_32,  pix0_0_32,  dif2_32
            SUB2			pix2_0_10,  pix0_0_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_01_00:had1_03_02
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_01_00:had2_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_32,  pix0_1_32,  dif1_32
            SUB2			pix1_1_10,  pix0_1_10,  dif1_10
            SUB2			pix2_1_32,  pix0_1_32,  dif2_32
            SUB2			pix2_1_10,  pix0_1_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_11_10:had1_13_12
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_11_10:had2_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_32,  pix0_2_32,  dif1_32
            SUB2			pix1_2_10,  pix0_2_10,  dif1_10
            SUB2			pix2_2_32,  pix0_2_32,  dif2_32
            SUB2			pix2_2_10,  pix0_2_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_21_20:had1_23_22
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_21_20:had2_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_32,  pix0_3_32,  dif1_32
            SUB2			pix1_3_10,  pix0_3_10,  dif1_10
            SUB2			pix2_3_32,  pix0_3_32,  dif2_32
            SUB2			pix2_3_10,  pix0_3_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_31_30:had1_33_32
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_31_30:had2_33_32
            ; exchange rows to columns of temp matrix
            DPACK2			had1_21_20, had1_01_00, had1_21_01:had1_20_00
            DPACK2			had1_31_30, had1_11_10, had1_31_11:had1_30_10
            DPACK2			had1_23_22, had1_03_02, had1_23_03:had1_22_02
            DPACK2			had1_33_32, had1_13_12, had1_33_13:had1_32_12
            DPACK2			had2_21_20, had2_01_00, had2_21_01:had2_20_00
            DPACK2			had2_31_30, had2_11_10, had2_31_11:had2_30_10
            DPACK2			had2_23_22, had2_03_02, had2_23_03:had2_22_02
            DPACK2			had2_33_32, had2_13_12, had2_33_13:had2_32_12
            ; 1st column of final-pass hadamard
            ADDSUB2			had1_20_00, had1_30_10, s23_s01_1:d23_d01_1
            ADDSUB2			had2_20_00, had2_30_10, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             dotp1_1,    dotp1_2,    satd_1
            ADD             dotp2_1,    dotp2_2,    satd_2
            ; 2nd column of final-pass hadamard
            ADDSUB2			had1_21_01, had1_31_11, s23_s01_1:d23_d01_1
            ADDSUB2			had2_21_01, had2_31_11, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 3rd column of final-pass hadamard
            ADDSUB2			had1_22_02, had1_32_12, s23_s01_1:d23_d01_1
            ADDSUB2			had2_22_02, had2_32_12, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 4th column of final-pass hadamard
            ADDSUB2			had1_23_03, had1_33_13, s23_s01_1:d23_d01_1
            ADDSUB2			had2_23_03, had2_33_13, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2

            ; store satd in order: ddl, ddr
            SHR				satd_1,     1,          satd_1 ; satd_ddl
            SHR				satd_2,     1,          satd_2 ; satd_ddr
            STNW            satd_1,     *+res[3] ; I_PRED_4x4_DDL= 3
            STNW            satd_2,     *+res[4] ; I_PRED_4x4_DDR= 4

            ;* predict_4x4_vr  *;
            ;*  M  A  B  C  D  *;
            ;*  I  6  7  8  9  *;
            ;*  J  0  1  2  3  *;
            ;*  K  5  6  7  8  *;
            ;*  L  4  0  1  2  *;
            PACKL4          r_CB,       r_AM,       r_CBAM
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_BA,       r_AM,       pix_10
            ADD2            r_DC,       r_CB,       pix_32
            ADD2            r_MI,       r_IJ,       pix_54
            ADD2            pix_10,     r_AM,       pix_10
            ADD2            pix_32,     r_CB,       pix_32
            ADD2            pix_54,     r_IJ,       pix_54
            ADD2            pix_10,     r_MI,       pix_10
            ADD2            pix_32,     r_BA,       pix_32
            ADD2            pix_54,     r_JK,       pix_54
            ADD2            pix_10,     k_2_2,      pix_10
            ADD2            pix_32,     k_2_2,      pix_32
            ADD2            pix_54,     k_2_2,      pix_54
            SHR2            pix_10,     2,          pix_10
            SHR2            pix_32,     2,          pix_32
            SHR2            pix_54,     2,          pix_54
            SWAP4           pix_54,     pix_54
            SWAP2           pix_54,     pix_45
            AVGU4           r_DCBA,     r_CBAM,     pix1_0_3210 ; (x1 + x2 + 1) >> 1
            SPACKU4         pix_32,     pix_10,     pix1_1_3210
            SHLMB           pix_54,     pix1_0_3210, pix1_2_3210
            SHLMB           pix_45,     pix1_1_3210, pix1_3_3210
            UNPKHU4			pix1_0_3210, pix1_0_32
            UNPKLU4			pix1_0_3210, pix1_0_10
            UNPKHU4			pix1_1_3210, pix1_1_32
            UNPKLU4			pix1_1_3210, pix1_1_10
            UNPKHU4			pix1_2_3210, pix1_2_32
            UNPKLU4			pix1_2_3210, pix1_2_10
            UNPKHU4			pix1_3_3210, pix1_3_32
            UNPKLU4			pix1_3_3210, pix1_3_10

            ;* predict_4x4_vl  *;
            ;*  M  A  B  C  D  *;
            ;*  I  5  6  7  8  *;
            ;*  J  0  1  2  3  *;
            ;*  K  6  7  8  9  *;
            ;*  L  1  2  3  4  *;
            ; (x1 + 2*x2 + x3 + 2) >> 2
            ADD2            r_BA,       r_CB,       pix_10
            ADD2            r_DC,       r_ED,       pix_32
            ADD2            r_FE,       r_GF,       pix_X4
            ADD2            pix_10,     r_CB,       pix_10
            ADD2            pix_32,     r_ED,       pix_32
            ADD2            pix_X4,     r_GF,       pix_X4
            ADD2            pix_10,     r_DC,       pix_10
            ADD2            pix_32,     r_FE,       pix_32
            ADD2            pix_X4,     r_HG,       pix_X4
            ADD2            pix_10,     k_2_2,      pix_10
            ADD2            pix_32,     k_2_2,      pix_32
            ADD2            pix_X4,     k_2_2,      pix_X4
            SHR2            pix_10,     2,          pix_10
            SHR2            pix_32,     2,          pix_32
            SHR2            pix_X4,     2,          pix_X4
            SHRMB           r_HGFE,     r_DCBA,     r_EDCB
            PACKLH2         r_HGFE,     r_DCBA,     r_FEDC
            AVGU4           r_DCBA,     r_EDCB,     pix2_0_3210 ; (x1 + x2 + 1) >> 1
            SPACKU4         pix_32,     pix_10,     pix2_1_3210
            AVGU4           r_EDCB,     r_FEDC,     pix2_2_3210 ; (x1 + x2 + 1) >> 1
            SHRMB           pix_X4,     pix2_1_3210, pix2_3_3210
            UNPKHU4			pix2_0_3210, pix2_0_32
            UNPKLU4			pix2_0_3210, pix2_0_10
            UNPKHU4			pix2_1_3210, pix2_1_32
            UNPKLU4			pix2_1_3210, pix2_1_10
            UNPKHU4			pix2_2_3210, pix2_2_32
            UNPKLU4			pix2_2_3210, pix2_2_10
            UNPKHU4			pix2_3_3210, pix2_3_32
            UNPKLU4			pix2_3_3210, pix2_3_10

            ; 1st line of first-pass hadamard
            SUB2			pix1_0_32,  pix0_0_32,  dif1_32
            SUB2			pix1_0_10,  pix0_0_10,  dif1_10
            SUB2			pix2_0_32,  pix0_0_32,  dif2_32
            SUB2			pix2_0_10,  pix0_0_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_01_00:had1_03_02
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_01_00:had2_03_02
            ; 2nd line of first-pass hadamard
            SUB2			pix1_1_32,  pix0_1_32,  dif1_32
            SUB2			pix1_1_10,  pix0_1_10,  dif1_10
            SUB2			pix2_1_32,  pix0_1_32,  dif2_32
            SUB2			pix2_1_10,  pix0_1_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_11_10:had1_13_12
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_11_10:had2_13_12
            ; 3rd line of first-pass hadamard
            SUB2			pix1_2_32,  pix0_2_32,  dif1_32
            SUB2			pix1_2_10,  pix0_2_10,  dif1_10
            SUB2			pix2_2_32,  pix0_2_32,  dif2_32
            SUB2			pix2_2_10,  pix0_2_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_21_20:had1_23_22
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_21_20:had2_23_22
            ; 4th line of first-pass hadamard
            SUB2			pix1_3_32,  pix0_3_32,  dif1_32
            SUB2			pix1_3_10,  pix0_3_10,  dif1_10
            SUB2			pix2_3_32,  pix0_3_32,  dif2_32
            SUB2			pix2_3_10,  pix0_3_10,  dif2_10
            DPACK2			dif1_32,    dif1_10,    dif1_31:dif1_20
            DPACK2			dif2_32,    dif2_10,    dif2_31:dif2_20
            ADDSUB2			dif1_20,    dif1_31,    s23_s01_1:d23_d01_1
            ADDSUB2			dif2_20,    dif2_31,    s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  had1_31_30:had1_33_32
            ADDSUB2			d01_s01_2,  d23_s23_2,  had2_31_30:had2_33_32
            ; exchange rows to columns of temp matrix
            DPACK2			had1_21_20, had1_01_00, had1_21_01:had1_20_00
            DPACK2			had1_31_30, had1_11_10, had1_31_11:had1_30_10
            DPACK2			had1_23_22, had1_03_02, had1_23_03:had1_22_02
            DPACK2			had1_33_32, had1_13_12, had1_33_13:had1_32_12
            DPACK2			had2_21_20, had2_01_00, had2_21_01:had2_20_00
            DPACK2			had2_31_30, had2_11_10, had2_31_11:had2_30_10
            DPACK2			had2_23_22, had2_03_02, had2_23_03:had2_22_02
            DPACK2			had2_33_32, had2_13_12, had2_33_13:had2_32_12
            ; 1st column of final-pass hadamard
            ADDSUB2			had1_20_00, had1_30_10, s23_s01_1:d23_d01_1
            ADDSUB2			had2_20_00, had2_30_10, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             dotp1_1,    dotp1_2,    satd_1
            ADD             dotp2_1,    dotp2_2,    satd_2
            ; 2nd column of final-pass hadamard
            ADDSUB2			had1_21_01, had1_31_11, s23_s01_1:d23_d01_1
            ADDSUB2			had2_21_01, had2_31_11, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 3rd column of final-pass hadamard
            ADDSUB2			had1_22_02, had1_32_12, s23_s01_1:d23_d01_1
            ADDSUB2			had2_22_02, had2_32_12, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2
            ; 4th column of final-pass hadamard
            ADDSUB2			had1_23_03, had1_33_13, s23_s01_1:d23_d01_1
            ADDSUB2			had2_23_03, had2_33_13, s23_s01_2:d23_d01_2
            DPACK2			d23_d01_1,  s23_s01_1,  d23_s23_1:d01_s01_1
            DPACK2			d23_d01_2,  s23_s01_2,  d23_s23_2:d01_s01_2
            ADDSUB2			d01_s01_1,  d23_s23_1,  s23_s01_1:d23_d01_1
            ADDSUB2			d01_s01_2,  d23_s23_2,  s23_s01_2:d23_d01_2
            ABS2			s23_s01_1,  abs1_1
            ABS2			d23_d01_1,  abs1_2
            ABS2			s23_s01_2,  abs2_1
            ABS2			d23_d01_2,  abs2_2
            DOTP2			abs1_1,     k_1,        dotp1_1
            DOTP2			abs1_2,     k_1,        dotp1_2
            DOTP2			abs2_1,     k_1,        dotp2_1
            DOTP2			abs2_2,     k_1,        dotp2_2
            ADD             satd_1,     dotp1_1,    satd_1
            ADD             satd_2,     dotp2_1,    satd_2
            ADD             satd_1,     dotp1_2,    satd_1
            ADD             satd_2,     dotp2_2,    satd_2

            ; store satd in order: vr, vl
            SHR				satd_1,     1,          satd_1 ; satd_vr
            SHR				satd_2,     1,          satd_2 ; satd_vl
            STNW            satd_1,     *+res[5] ; I_PRED_4x4_VR = 5
            STNW            satd_2,     *+res[7] ; I_PRED_4x4_VL = 7

            .return
            .endproc

;* ======================================================================== *;
;* x264_pixel_ssd_8x8_ti -- ssd on 8x8 block (memory unaligned)             *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_ssd_8x8_ti"
        .global _x264_pixel_ssd_8x8_ti
_x264_pixel_ssd_8x8_ti .cproc pix1, i_pix1, pix2, i_pix2
            .no_mdep

            .reg            pix1_7654:pix1_3210
            .reg            pix2_7654:pix2_3210
            .reg            diff_7654, diff_3210
            .reg			diff_76, diff_54, diff_32, diff_10
            .reg			i_pix1_8x, i_pix2_8x
            .reg			dotp_1, dotp_2, dotp_3, dotp_4
            .reg            ssd, ssd_1, ssd_2, i

            SHR             i_pix1,     3,      i_pix1_8x  ; i_pix1_8x = i_pix1 >> 3
            SHR				i_pix2,     3,      i_pix2_8x  ; i_pix2_8x = i_pix2 >> 3
            MVK             7,          i                  ; i = 7
            ZERO            ssd_1                          ; ssd_1 = 0
            ZERO            ssd_2                          ; ssd_2 = 0

loop_ssd_8x8: .trip         8,          8,      8          ; loop count
            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 1
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 1

            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            SUBABS4         pix1_3210,    pix2_3210, diff_3210

            UNPKHU4			diff_7654,    diff_76
            UNPKLU4			diff_7654,    diff_54
            UNPKHU4			diff_3210,    diff_32
            UNPKLU4			diff_3210,    diff_10

            DOTP2			diff_76,      diff_76,   dotp_4 ; d[7]*d[7] + d[6]*d[6]
            DOTP2			diff_54,      diff_54,   dotp_3 ; d[5]*d[5] + d[4]*d[4]
            DOTP2			diff_32,      diff_32,   dotp_2 ; d[3]*d[3] + d[2]*d[2]
            DOTP2			diff_10,      diff_10,   dotp_1 ; d[1]*d[1] + d[0]*d[0]

            ADD             ssd_2,        dotp_4,    ssd_2
            ADD             ssd_2,        dotp_3,    ssd_2
            ADD             ssd_1,        dotp_2,    ssd_1
            ADD             ssd_1,        dotp_1,    ssd_1

   [i]      BDEC            loop_ssd_8x8,  i

            ADD             ssd_1,        ssd_2,     ssd
            .return         ssd
            .endproc

;* ======================================================================== *;
;* x264_pixel_var2_8x8_ti -- var2 on 8x8 block (memory unaligned)           *;
;* ======================================================================== *;
		.sect ".text:_x264_pixel_var2_8x8_ti"
        .global _x264_pixel_var2_8x8_ti
_x264_pixel_var2_8x8_ti .cproc pix1, i_pix1, pix2, i_pix2, p_ssd
            .no_mdep

            .reg            pix1_7654:pix1_3210
            .reg            pix2_7654:pix2_3210
            .reg            diff_7654, diff_3210
            .reg			diff_76, diff_54, diff_32, diff_10
            .reg			i_pix1_8x, i_pix2_8x
            .reg			pix1_sum, pix2_sum
            .reg			dotp_1, dotp_2, dotp_3, dotp_4
            .reg            var2, var, ssd, ssd_1, ssd_2, i, k_1

            MVKL            0x01010101, k_1
            MVKH            0x01010101, k_1                ; k_1 = 0x01010101
            SHR             i_pix1,     3,      i_pix1_8x  ; i_pix1_8x = i_pix1 >> 3
            SHR				i_pix2,     3,      i_pix2_8x  ; i_pix2_8x = i_pix2 >> 3
            MVK             7,          i                  ; i = 7
            ZERO			pix1_sum                       ; pix1_sum = 0
            ZERO			pix2_sum                       ; pix2_sum = 0
            ZERO            ssd_1                          ; ssd_1 = 0
            ZERO            ssd_2                          ; ssd_2 = 0

loop_var2_8x8: .trip         8,          8,      8          ; loop count
            LDNDW           *pix1++[i_pix1_8x], pix1_7654:pix1_3210 ; 8 bytes of pix1 line 1
            LDNDW           *pix2++[i_pix2_8x], pix2_7654:pix2_3210 ; 8 bytes of pix2 line 1

            DOTPU4          pix1_7654,    k_1,       dotp_4 ; p1[7] + p1[6] + p1[5] + p1[4]
            DOTPU4          pix1_3210,    k_1,       dotp_3 ; p1[3] + p1[2] + p1[1] + p1[0]
            DOTPU4          pix2_7654,    k_1,       dotp_2 ; p2[7] + p2[6] + p2[5] + p2[4]
            DOTPU4          pix2_3210,    k_1,       dotp_1 ; p2[3] + p2[2] + p2[1] + p2[0]

            ADD             pix1_sum,     dotp_4,    pix1_sum
            ADD				pix1_sum,     dotp_3,    pix1_sum
            ADD             pix2_sum,     dotp_2,    pix2_sum
            ADD				pix2_sum,     dotp_1,    pix2_sum

            SUBABS4         pix1_7654,    pix2_7654, diff_7654
            SUBABS4         pix1_3210,    pix2_3210, diff_3210

            UNPKHU4			diff_7654,    diff_76
            UNPKLU4			diff_7654,    diff_54
            UNPKHU4			diff_3210,    diff_32
            UNPKLU4			diff_3210,    diff_10

            DOTP2			diff_76,      diff_76,   dotp_4 ; d[7]*d[7] + d[6]*d[6]
            DOTP2			diff_54,      diff_54,   dotp_3 ; d[5]*d[5] + d[4]*d[4]
            DOTP2			diff_32,      diff_32,   dotp_2 ; d[3]*d[3] + d[2]*d[2]
            DOTP2			diff_10,      diff_10,   dotp_1 ; d[1]*d[1] + d[0]*d[0]

            ADD             ssd_2,        dotp_4,    ssd_2
            ADD             ssd_2,        dotp_3,    ssd_2
            ADD             ssd_1,        dotp_2,    ssd_1
            ADD             ssd_1,        dotp_1,    ssd_1

   [i]      BDEC            loop_var2_8x8,  i

            ; var = ((pix1_sum - pix2_sum) * (pix1_sum - pix2_sum)) >> 6
            SUB2			pix1_sum,     pix2_sum,  var ; SUB2 make sure the result is in Signed 16 LSB
            MPY				var,          var,       var ; Multiply Signed 16 LSB × Signed 16 LSB
            SHR				var,          6,         var

            ADD             ssd_1,        ssd_2,     ssd
            STNW			ssd,          *p_ssd

            ; var2 = ssd - var
            SUB				ssd,          var,       var2

            .return         var2
            .endproc
